name: 🚀 Manual Deploy (Docker)

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        type: choice
        options:
        - staging
        - production
      force:
        description: 'Force deployment even if health checks fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  deploy:
    name: 🚀 Manual Deploy
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: |
          server/package-lock.json
          miniapp/package-lock.json
    
    - name: 📦 Install server dependencies
      run: |
        echo "📦 Installing server dependencies..."
        cd server
        npm ci
    
    - name: 📦 Install miniapp dependencies
      run: |
        echo "📦 Installing MiniApp dependencies..."
        cd miniapp
        npm ci
    
    - name: 🧪 Run server tests
      run: |
        echo "🧪 Running server tests..."
        cd server
        if npm run test; then
          echo "✅ Server tests passed"
        else
          echo "⚠️  Server tests failed, but continuing deployment"
        fi
    
    - name: 🧪 Run miniapp tests
      run: |
        echo "🧪 Running MiniApp tests..."
        cd miniapp
        if npm run test; then
          echo "✅ MiniApp tests passed"
        else
          echo "⚠️  MiniApp tests failed, but continuing deployment"
        fi
    
    - name: 🏗️ Build MiniApp
      run: |
        echo "🏗️ Building MiniApp..."
        cd miniapp
        npm run build
    
    - name: 🔑 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: 🚀 Deploy to server
      run: |
        echo "🚀 Starting manual Docker deployment..."
        
        # Створення архіву для всього
        tar -czf manual-deploy.tar.gz server/ miniapp/dist/ docker/ docker-compose.yml docker-*.sh
        echo "📦 Archive created: manual-deploy.tar.gz"
        
        # Завантаження на сервер
        echo "📤 Uploading to server..."
        scp -o StrictHostKeyChecking=no manual-deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        
        # Виконання команд на сервері
        echo "🔧 Executing deployment commands on server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          echo "🔄 Starting manual Docker deployment process..."
          cd /var/www/skillklan
          
          # Стоп всіх сервісів
          echo "⏹️  Stopping all services..."
          if [ -f "docker-compose.yml" ]; then
            docker-compose down --remove-orphans || echo "⚠️  Docker services were not running"
          fi
          
          # Зупинка PM2 процесів (якщо є)
          if command -v pm2 &> /dev/null; then
            pm2 stop all || echo "⚠️  PM2 processes were not running"
          fi
          
          # Зупинка системних сервісів
          sudo systemctl stop nginx || echo "⚠️  Nginx was not running"
          sudo systemctl stop postgresql || echo "⚠️  PostgreSQL was not running"
          
          # Резервна копія
          if [ -d "backup" ]; then
            rm -rf backup
          fi
          mkdir backup
          
          if [ -d "server" ]; then
            echo "💾 Backing up server..."
            mv server backup/
          fi
          
          if [ -d "public" ]; then
            echo "💾 Backing up frontend..."
            mv public backup/
          fi
          
          if [ -d "docker" ]; then
            echo "💾 Backing up docker config..."
            mv docker backup/
          fi
          
          # Розпакування нової версії
          echo "📦 Extracting new version..."
          cd /tmp
          tar -xzf manual-deploy.tar.gz
          mv server /var/www/skillklan/
          mv dist /var/www/skillklan/public
          mv docker /var/www/skillklan/
          mv docker-compose.yml /var/www/skillklan/
          mv docker-*.sh /var/www/skillklan/
          
          # Налаштування сервера
          echo "🔧 Setting up server..."
          cd /var/www/skillklan/server
          npm ci --production
          
          # Налаштування frontend
          echo "🔧 Setting up frontend..."
          sudo chown -R www-data:www-data /var/www/skillklan/public
          sudo chmod -R 755 /var/www/skillklan/public
          
          # Запуск Docker сервісів
          echo "🚀 Starting Docker services..."
          cd /var/www/skillklan
          chmod +x docker-*.sh
          ./docker-deploy.sh deploy
          
          # Очищення
          rm /tmp/manual-deploy.tar.gz
          
          echo "✅ Manual Docker deployment completed successfully!"
        EOF
        
        echo "✅ Manual Docker deployment completed!"
    
    - name: 🔍 Health checks
      run: |
        echo "🔍 Performing health checks..."
        
        # Чекаємо поки сервіси запустяться
        echo "⏳ Waiting for services to start..."
        sleep 45
        
        # Перевіряємо сервер
        echo "🏥 Checking server health..."
        if curl -f http://${{ secrets.SERVER_HOST }}/api/health; then
          echo "✅ Server is healthy"
        else
          echo "❌ Server health check failed"
          if [ "${{ github.event.inputs.force }}" = "false" ]; then
            exit 1
          fi
        fi
        
        # Перевіряємо frontend
        echo "🏥 Checking frontend health..."
        if curl -f http://${{ secrets.SERVER_HOST }}/; then
          echo "✅ Frontend is healthy"
        else
          echo "❌ Frontend health check failed"
          if [ "${{ github.event.inputs.force }}" = "false" ]; then
            exit 1
          fi
        fi
    
    - name: 📧 Deployment summary
      run: |
        echo "🎉 Manual Docker deployment completed successfully!"
        echo "   Environment: ${{ github.event.inputs.environment }}"
        echo "   Server: ${{ secrets.SERVER_HOST }}"
        echo "   Timestamp: $(date -u)"
        echo "   Commit: ${{ github.sha }}"
        echo "   Type: Manual Docker deployment (server + frontend)"
        echo "   Force: ${{ github.event.inputs.force }}"

  rollback:
    name: 🔄 Rollback
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    if: failure()
    
    steps:
    - name: 🔑 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: 🔄 Rollback deployment
      run: |
        echo "🔄 Starting rollback process..."
        
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          echo "🔄 Starting rollback process..."
          cd /var/www/skillklan
          
          # Перевіряємо наявність резервних копій
          if [ ! -d "backup" ]; then
            echo "❌ No backup directory found"
            exit 1
          fi
          
          echo "📋 Available backups:"
          ls -la backup/
          
          # Стоп Docker сервісів
          echo "⏹️  Stopping Docker services..."
          if [ -f "docker-compose.yml" ]; then
            docker-compose down --remove-orphans || echo "⚠️  Docker services were not running"
          fi
          
          # Визначаємо що відкатувати
          if [ -d "backup/server" ]; then
            echo "🔄 Rolling back server..."
            if [ -d "server" ]; then
              rm -rf server
            fi
            mv backup/server ./
          fi
          
          if [ -d "backup/public" ]; then
            echo "🔄 Rolling back frontend..."
            if [ -d "public" ]; then
              rm -rf public
            fi
            mv backup/public ./
          fi
          
          if [ -d "backup/docker" ]; then
            echo "🔄 Rolling back docker config..."
            if [ -d "docker" ]; then
              rm -rf docker
            fi
            mv backup/docker ./
          fi
          
          # Запуск оригінальних сервісів
          if [ -d "server" ] && [ -f "ecosystem.config.js" ]; then
            echo "🚀 Starting server with PM2..."
            cd server
            pm2 start ecosystem.config.js --env ${{ github.event.inputs.environment }}
            pm2 save
            cd ..
          elif [ -d "docker" ] && [ -f "docker-compose.yml" ]; then
            echo "🚀 Starting Docker services..."
            chmod +x docker-*.sh
            ./docker-deploy.sh deploy
          fi
          
          if [ -d "public" ]; then
            echo "🚀 Starting Nginx..."
            sudo systemctl start nginx
          fi
          
          # Очищення
          rm -rf backup
          
          echo "✅ Rollback completed successfully!"
        EOF
        
        echo "✅ Rollback completed!"
    
    - name: 🔍 Health checks after rollback
      run: |
        echo "🔍 Performing health checks after rollback..."
        
        # Чекаємо поки сервіси запустяться
        echo "⏳ Waiting for services to start..."
        sleep 30
        
        # Перевіряємо сервер
        echo "🏥 Checking server health..."
        if curl -f http://${{ secrets.SERVER_HOST }}/api/health; then
          echo "✅ Server is healthy after rollback"
        else
          echo "❌ Server health check failed after rollback"
        fi
        
        # Перевіряємо frontend
        echo "🏥 Checking frontend health..."
        if curl -f http://${{ secrets.SERVER_HOST }}/; then
          echo "✅ Frontend is healthy after rollback"
        else
          echo "❌ Frontend health check failed after rollback"
        fi
    
    - name: 📧 Rollback summary
      run: |
        echo "🔄 Rollback completed!"
        echo "   Environment: ${{ github.event.inputs.environment }}"
        echo "   Server: ${{ secrets.SERVER_HOST }}"
        echo "   Timestamp: $(date -u)"
        echo "   Type: Rollback to previous version"
