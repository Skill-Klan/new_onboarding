name: 🚀 Smart Deploy (Docker)

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production
      force:
        description: 'Force deployment even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  analyze-changes:
    name: 🔍 Analyze Changes
    runs-on: ubuntu-latest
    outputs:
      server-changed: ${{ steps.changes.outputs.server }}
      miniapp-changed: ${{ steps.changes.outputs.miniapp }}
      config-changed: ${{ steps.changes.outputs.config }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: 🔍 Detect changes
      uses: dorny/paths-filter@v2
      id: changes
      with:
        filters: |
          server:
            - 'server/**'
            - 'docker/**'
            - 'docker-compose.yml'
            - 'docker-deploy.sh'
          miniapp:
            - 'miniapp/**'
          config:
            - '.github/**'
            - '*.md'
            - '*.sh'

  deploy-server:
    name: 🐳 Deploy Server (Docker)
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.server-changed == 'true'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: 🔑 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: 🚀 Deploy to server
      run: |
        echo "🚀 Starting Docker server deployment..."
        
        # Створення архіву для сервера
        tar -czf server-deploy.tar.gz server/ docker/ docker-compose.yml docker-deploy.sh docker-backup.sh docker-monitor.sh
        echo "📦 Archive created: server-deploy.tar.gz"
        
        # Завантаження на сервер
        echo "📤 Uploading to server..."
        scp -o StrictHostKeyChecking=no server-deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        
        # Виконання команд на сервері
        echo "🔧 Executing deployment commands on server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          echo "🔄 Starting Docker server deployment process..."
          cd /var/www/skillklan
          
          # Стоп поточних сервісів
          echo "⏹️  Stopping current services..."
          if [ -f "docker-compose.yml" ]; then
            docker-compose down --remove-orphans || echo "⚠️  Docker services were not running"
          fi
          
          # Зупинка PM2 процесів (якщо є)
          if command -v pm2 &> /dev/null; then
            pm2 stop all || echo "⚠️  PM2 processes were not running"
          fi
          
          # Зупинка системних сервісів
          sudo systemctl stop nginx || echo "⚠️  Nginx was not running"
          sudo systemctl stop postgresql || echo "⚠️  PostgreSQL was not running"
          
          # Резервна копія
          if [ -d "backup" ]; then
            rm -rf backup
          fi
          mkdir backup
          
          if [ -d "server" ]; then
            echo "💾 Backing up server..."
            mv server backup/
          fi
          
          if [ -d "docker" ]; then
            echo "💾 Backing up docker config..."
            mv docker backup/
          fi
          
          # Розпакування нової версії
          echo "📦 Extracting new version..."
          cd /tmp
          tar -xzf server-deploy.tar.gz
          mv server /var/www/skillklan/
          mv docker /var/www/skillklan/
          mv docker-compose.yml /var/www/skillklan/
          mv docker-*.sh /var/www/skillklan/
          
          # Встановлення залежностей
          echo "📥 Installing dependencies..."
          cd /var/www/skillklan/server
          npm ci --production
          
          # Запуск Docker сервісів
          echo "🚀 Starting Docker services..."
          cd /var/www/skillklan
          chmod +x docker-*.sh
          ./docker-deploy.sh deploy
          
          # Очищення
          rm /tmp/server-deploy.tar.gz
          
          echo "✅ Docker server deployment completed successfully!"
        EOF
        
        echo "✅ Docker server deployment completed!"

  deploy-miniapp:
    name: 🎨 Deploy MiniApp
    runs-on: ubuntu-latest
    needs: analyze-changes
    if: needs.analyze-changes.outputs.miniapp-changed == 'true'
    environment: ${{ github.event.inputs.environment || 'staging' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: miniapp/package-lock.json
    
    - name: 📦 Install dependencies
      run: |
        echo "📦 Installing MiniApp dependencies..."
        cd miniapp
        npm ci
    
    - name: 🧪 Run tests
      run: |
        echo "🧪 Running MiniApp tests..."
        cd miniapp
        if npm run test; then
          echo "✅ Tests passed"
        else
          echo "⚠️  Tests failed, but continuing deployment"
        fi
    
    - name: 🏗️ Build MiniApp
      run: |
        echo "🏗️ Building MiniApp..."
        cd miniapp
        npm run build
    
    - name: 🚀 Deploy to server
      run: |
        echo "🚀 Starting MiniApp deployment..."
        
        # Створення архіву для frontend
        tar -czf miniapp-deploy.tar.gz miniapp/dist/
        echo "📦 Archive created: miniapp-deploy.tar.gz"
        
        # Завантаження на сервер
        echo "📤 Uploading to server..."
        scp -o StrictHostKeyChecking=no miniapp-deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        
        # Виконання команд на сервері
        echo "🔧 Executing deployment commands on server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          echo "🔄 Starting MiniApp deployment process..."
          cd /var/www/skillklan
          
          # Створення директорії для frontend
          mkdir -p public
          
          # Резервна копія
          if [ -d "public" ] && [ "$(ls -A public)" ]; then
            echo "💾 Backing up frontend..."
            mv public backup/public
          fi
          
          # Розпакування нової версії
          echo "📦 Extracting new version..."
          cd /tmp
          tar -xzf miniapp-deploy.tar.gz
          mv dist /var/www/skillklan/public
          
          # Налаштування прав доступу
          echo "🔧 Setting up permissions..."
          sudo chown -R www-data:www-data /var/www/skillklan/public
          sudo chmod -R 755 /var/www/skillklan/public
          
          # Перезапуск Nginx контейнера
          echo "🔄 Restarting Nginx container..."
          docker-compose restart nginx
          
          # Очищення
          rm /tmp/miniapp-deploy.tar.gz
          
          echo "✅ MiniApp deployment completed successfully!"
        EOF
        
        echo "✅ MiniApp deployment completed!"

  deploy-full:
    name: 🚀 Deploy Everything (Docker)
    runs-on: ubuntu-latest
    needs: [analyze-changes, deploy-server, deploy-miniapp]
    if: needs.analyze-changes.outputs.server-changed == 'true' && needs.analyze-changes.outputs.miniapp-changed == 'true'
    environment: ${{ github.event.inputs.environment || 'production' }}
    
    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
    
    - name: 🔑 Setup SSH
      uses: webfactory/ssh-agent@v0.8.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
    
    - name: 🚀 Deploy everything
      run: |
        echo "🚀 Starting full Docker deployment..."
        
        # Створення архіву для всього
        tar -czf full-deploy.tar.gz server/ miniapp/dist/ docker/ docker-compose.yml docker-*.sh
        echo "📦 Archive created: full-deploy.tar.gz"
        
        # Завантаження на сервер
        echo "📤 Uploading to server..."
        scp -o StrictHostKeyChecking=no full-deploy.tar.gz ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }}:/tmp/
        
        # Виконання команд на сервері
        echo "🔧 Executing deployment commands on server..."
        ssh -o StrictHostKeyChecking=no ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_HOST }} << 'EOF'
          set -e
          
          echo "🔄 Starting full Docker deployment process..."
          cd /var/www/skillklan
          
          # Стоп всіх сервісів
          echo "⏹️  Stopping all services..."
          if [ -f "docker-compose.yml" ]; then
            docker-compose down --remove-orphans || echo "⚠️  Docker services were not running"
          fi
          
          # Зупинка PM2 процесів (якщо є)
          if command -v pm2 &> /dev/null; then
            pm2 stop all || echo "⚠️  PM2 processes were not running"
          fi
          
          # Зупинка системних сервісів
          sudo systemctl stop nginx || echo "⚠️  Nginx was not running"
          sudo systemctl stop postgresql || echo "⚠️  PostgreSQL was not running"
          
          # Резервна копія
          if [ -d "backup" ]; then
            rm -rf backup
          fi
          mkdir backup
          
          if [ -d "server" ]; then
            echo "💾 Backing up server..."
            mv server backup/
          fi
          
          if [ -d "public" ]; then
            echo "💾 Backing up frontend..."
            mv public backup/
          fi
          
          if [ -d "docker" ]; then
            echo "💾 Backing up docker config..."
            mv docker backup/
          fi
          
          # Розпакування нової версії
          echo "📦 Extracting new version..."
          cd /tmp
          tar -xzf full-deploy.tar.gz
          mv server /var/www/skillklan/
          mv dist /var/www/skillklan/public
          mv docker /var/www/skillklan/
          mv docker-compose.yml /var/www/skillklan/
          mv docker-*.sh /var/www/skillklan/
          
          # Налаштування сервера
          echo "🔧 Setting up server..."
          cd /var/www/skillklan/server
          npm ci --production
          
          # Налаштування frontend
          echo "🔧 Setting up frontend..."
          sudo chown -R www-data:www-data /var/www/skillklan/public
          sudo chmod -R 755 /var/www/skillklan/public
          
          # Запуск Docker сервісів
          echo "🚀 Starting Docker services..."
          cd /var/www/skillklan
          chmod +x docker-*.sh
          ./docker-deploy.sh deploy
          
          # Очищення
          rm /tmp/full-deploy.tar.gz
          
          echo "✅ Full Docker deployment completed successfully!"
        EOF
        
        echo "✅ Full Docker deployment completed!"
    
    - name: 🔍 Health checks
      run: |
        echo "🔍 Performing health checks..."
        
        # Чекаємо поки сервіси запустяться
        echo "⏳ Waiting for services to start..."
        sleep 45
        
        # Перевіряємо сервер
        echo "🏥 Checking server health..."
        if curl -f http://${{ secrets.SERVER_HOST }}/api/health; then
          echo "✅ Server is healthy"
        else
          echo "❌ Server health check failed"
          exit 1
        fi
        
        # Перевіряємо frontend
        echo "🏥 Checking frontend health..."
        if curl -f http://${{ secrets.SERVER_HOST }}/; then
          echo "✅ Frontend is healthy"
        else
          echo "❌ Frontend health check failed"
          exit 1
        fi
    
    - name: 📧 Deployment summary
      run: |
        echo "🎉 Full Docker deployment completed successfully!"
        echo "   Environment: ${{ github.event.inputs.environment || 'production' }}"
        echo "   Server: ${{ secrets.SERVER_HOST }}"
        echo "   Timestamp: $(date -u)"
        echo "   Commit: ${{ github.sha }}"
        echo "   Type: Full Docker deployment (server + frontend)"

  deployment-summary:
    name: 📊 Deployment Summary
    needs: [analyze-changes, deploy-server, deploy-miniapp, deploy-full]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: 📊 Summary
      run: |
        echo "🎯 DEPLOYMENT SUMMARY"
        echo "===================="
        echo ""
        
        if [ "${{ needs.analyze-changes.outputs.server-changed }}" == "true" ]; then
          echo "✅ Server changes detected and deployed"
        else
          echo "ℹ️  No server changes detected"
        fi
        
        if [ "${{ needs.analyze-changes.outputs.miniapp-changed }}" == "true" ]; then
          echo "✅ MiniApp changes detected and deployed"
        else
          echo "ℹ️  No MiniApp changes detected"
        fi
        
        if [ "${{ needs.analyze-changes.outputs.config-changed }}" == "true" ]; then
          echo "✅ Configuration changes detected"
        else
          echo "ℹ️  No configuration changes detected"
        fi
        
        echo ""
        echo "🚀 Deployment completed using Docker containers!"
        echo "🐳 All services now running in Docker"
        echo "📊 Check server status: docker-compose ps"
