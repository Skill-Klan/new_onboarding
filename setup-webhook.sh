#!/bin/bash

# –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –∑–∞–º—ñ—Å—Ç—å polling —Ä–µ–∂–∏–º—É
# –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: ./setup-webhook.sh [server_ip] [server_user] [webhook_url]

set -e

# –ü–∞—Ä–∞–º–µ—Ç—Ä–∏
SERVER_IP=${1:-"192.168.88.121"}
SERVER_USER=${2:-"roman"}
PROJECT_PATH="/home/roman/new_onboarding"
WEBHOOK_URL=${3:-"https://$SERVER_IP:3001/webhook"}

echo "üîß –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –¥–ª—è Telegram –±–æ—Ç–∞..."
echo "üìã –ü–∞—Ä–∞–º–µ—Ç—Ä–∏:"
echo "   - –°–µ—Ä–≤–µ—Ä: $SERVER_USER@$SERVER_IP"
echo "   - –®–ª—è—Ö: $PROJECT_PATH"
echo "   - Webhook URL: $WEBHOOK_URL"
echo ""

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∫–æ–º–∞–Ω–¥ –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ
run_on_server() {
    ssh $SERVER_USER@$SERVER_IP "$1"
}

echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞..."
if ! run_on_server "echo '–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —É—Å–ø—ñ—à–Ω–µ'"; then
    echo "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ $SERVER_IP"
    exit 1
fi

echo "‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ —Å–µ—Ä–≤–µ—Ä–∞ —É—Å–ø—ñ—à–Ω–µ"

# –û—Ç—Ä–∏–º—É—î–º–æ BOT_TOKEN
echo "üîë –û—Ç—Ä–∏–º–∞–Ω–Ω—è BOT_TOKEN..."
BOT_TOKEN=$(run_on_server "cd $PROJECT_PATH && grep TELEGRAM_BOT_TOKEN server/.env | cut -d= -f2")
if [ -z "$BOT_TOKEN" ]; then
    echo "‚ùå BOT_TOKEN –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ server/.env"
    exit 1
fi
echo "‚úÖ BOT_TOKEN –æ—Ç—Ä–∏–º–∞–Ω–æ"

echo "üßπ –û—á–∏—â–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ webhook..."
WEBHOOK_RESULT=$(run_on_server "curl -s -X POST 'https://api.telegram.org/bot$BOT_TOKEN/deleteWebhook'")
echo "Webhook —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $WEBHOOK_RESULT"

echo "üîß –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –Ω–æ–≤–æ–≥–æ webhook..."
WEBHOOK_SET_RESULT=$(run_on_server "curl -s -X POST 'https://api.telegram.org/bot$BOT_TOKEN/setWebhook' -H 'Content-Type: application/json' -d '{\"url\": \"$WEBHOOK_URL\"}'")
echo "Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç: $WEBHOOK_SET_RESULT"

echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É webhook..."
WEBHOOK_INFO=$(run_on_server "curl -s 'https://api.telegram.org/bot$BOT_TOKEN/getWebhookInfo'")
echo "Webhook —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è: $WEBHOOK_INFO"

echo "üîß –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó webhook (—É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è webhook —Ä–µ–∂–∏–º—É)..."
# –°—Ç–≤–æ—Ä—é—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—é –∑ webhook —Ä–µ–∂–∏–º–æ–º
run_on_server "cd $PROJECT_PATH && cat > server/config/webhook.config.js << 'EOF'
// –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –≤–µ–±-—Ö—É–∫—ñ–≤
// –¶–µ–π —Ñ–∞–π–ª –º—ñ—Å—Ç–∏—Ç—å –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è Discord webhook —ñ–Ω—Ç–µ–≥—Ä–∞—Ü—ñ—ó

module.exports = {
  // –¢–æ–≥–ª –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è webhook –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  enabled: true,
  
  // URL Discord webhook
  webhookUrl: process.env.DISCORD_WEBHOOK_URL || 'https://discord.com/api/webhooks/1412903925694332998/XDyrZ3asQ80y_NAdv_3lErNylvFUTru2pjZyzpjAm38XLs102DQ-LnUEZXNiPtmUuPWm',
  
  // –¢–∞–π–º–∞—É—Ç –¥–ª—è webhook –∑–∞–ø–∏—Ç—ñ–≤ (–≤ –º—ñ–ª—ñ—Å–µ–∫—É–Ω–¥–∞—Ö)
  timeout: 10000,
  
  // –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  colors: {
    info: 0x3498db,      // –°–∏–Ω—ñ–π - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    success: 0x2ecc71,   // –ó–µ–ª–µ–Ω–∏–π - —É—Å–ø—ñ—à–Ω—ñ –¥—ñ—ó
    warning: 0xf39c12,   // –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π - –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
    danger: 0xe74c3c,    // –ß–µ—Ä–≤–æ–Ω–∏–π - –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó
    primary: 0x9b59b6    // –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π - –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–¥—ñ—ó
  },
  
  // –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –¥–ª—è —Ä—ñ–∑–Ω–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
  notifications: {
    userStarted: true,        // –ü–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º
    userReady: true,          // –ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏
    contactProvided: true,    // –ù–∞–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
    taskSent: true,           // –í—ñ–¥–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
    taskCompleted: true,      // –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è
    deadlineWarning: true,    // –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω
    deadlineToday: true       // –û—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω—É
  },
  
  // –õ–æ–≥—É–≤–∞–Ω–Ω—è webhook –¥—ñ–π
  logging: {
    enabled: true,
    logLevel: 'info' // 'debug', 'info', 'warn', 'error'
  }
};
EOF"

echo "üîß –û–Ω–æ–≤–ª–µ–Ω–Ω—è server.js –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ webhook..."
# –û–Ω–æ–≤–ª—é—î–º–æ server.js –¥–ª—è –ø—ñ–¥—Ç—Ä–∏–º–∫–∏ webhook
run_on_server "cd $PROJECT_PATH && cat > server/server.js << 'EOF'
const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

// –Ü–º–ø–æ—Ä—Ç –±–æ—Ç–∞
const SkillKlanBot = require('./bot/bot');

const app = express();

// Middleware
app.use(helmet());
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://your-domain.com'] 
    : ['http://localhost:5173', 'https://*.ngrok-free.app']
}));
app.use(express.json());

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

// –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('Database connection error:', err);
  } else {
    console.log('Database connected successfully');
  }
});

// Health check endpoint
app.get(\"/api/health\", (req, res) => {
  res.json({ status: \"ok\", timestamp: new Date().toISOString() });
});

// Webhook endpoint –¥–ª—è Telegram
app.post('/webhook', (req, res) => {
  console.log('üì® –û—Ç—Ä–∏–º–∞–Ω–æ webhook –≤—ñ–¥ Telegram:', req.body);
  
  if (botInstance) {
    botInstance.handleUpdate(req.body);
  }
  
  res.status(200).send('OK');
});

// API –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
app.post('/api/test-task-request', async (req, res) => {
  const client = await pool.connect();
  
  try {
    const { name, phone, email, profession, telegram_id, contact_source = 'manual' } = req.body;
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    if (!name || !phone || !profession) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —ñ–º\\'—è, —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—é' 
      });
    }
    
    if (!['qa', 'ba'].includes(profession)) {
      return res.status(400).json({ 
        error: '–ù–µ–≤—ñ—Ä–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—è' 
      });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∂–µ—Ä–µ–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    if (!['telegram', 'manual'].includes(contact_source)) {
      return res.status(400).json({ 
        error: '–ù–µ–≤—ñ—Ä–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤' 
      });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
    const cleanPhone = phone.replace(/[^\\d]/g, '');
    if (cleanPhone.length !== 10 || !cleanPhone.startsWith('0')) {
      return res.status(400).json({ 
        error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –û—á—ñ–∫—É—î—Ç—å—Å—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–º–µ—Ä (10 —Ü–∏—Ñ—Ä, –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0)' 
      });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ
    if (name.trim().length < 2 || name.trim().length > 50) {
      return res.status(400).json({ 
        error: '–Ü–º\\'—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤' 
      });
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    console.log(\`üìù –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∑ –¥–∂–µ—Ä–µ–ª–∞: \${contact_source} –¥–ª—è telegram_id: \${telegram_id}\`);
    
    await client.query('BEGIN');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º telegram_id
    let userResult = await client.query(
      'SELECT id FROM users WHERE telegram_id = \$1',
      [telegram_id]
    );
    
    let userId;
    
    if (userResult.rows.length === 0) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      console.log(\`üë§ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ telegram_id: \${telegram_id}\`);
      const newUserResult = await client.query(
        'INSERT INTO users (telegram_id, name, phone, email) VALUES (\$1, \$2, \$3, \$4) RETURNING id',
        [telegram_id, name.trim(), phone, email || '']
      );
      userId = newUserResult.rows[0].id;
      console.log(\`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: \${userId}\`);
    } else {
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      console.log(\`üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: \${userResult.rows[0].id}\`);
      await client.query(
        'UPDATE users SET name = \$1, phone = \$2, email = \$3, updated_at = CURRENT_TIMESTAMP WHERE telegram_id = \$4',
        [name.trim(), phone, email || '', telegram_id]
      );
      userId = userResult.rows[0].id;
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    console.log(\`üìã –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ \${userId}, –ø—Ä–æ—Ñ–µ—Å—ñ—è: \${profession}\`);
    await client.query(
      'INSERT INTO test_task_requests (user_id, profession) VALUES (\$1, \$2)',
      [userId, profession]
    );
    
    await client.query('COMMIT');
    
    console.log(\`‚úÖ –ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. User ID: \${userId}, –î–∂–µ—Ä–µ–ª–æ: \${contact_source}\`);
    
    res.json({ 
      success: true, 
      message: '–ó–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
      user_id: userId,
      contact_source: contact_source
    });
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({ 
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.' 
    });
  } finally {
    client.release();
  }
});

// ========================================
// Webhook Management API
// ========================================

// –ì–ª–æ–±–∞–ª—å–Ω–∞ –∑–º—ñ–Ω–Ω–∞ –¥–ª—è –∑–±–µ—Ä—ñ–≥–∞–Ω–Ω—è –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ webhookService
let webhookServiceInstance = null;
let botInstance = null;

// API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É webhook
app.get('/api/webhook/status', (req, res) => {
  try {
    if (!webhookServiceInstance) {
      return res.status(503).json({ 
        error: 'WebhookService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ' 
      });
    }
    
    const status = webhookServiceInstance.getStatus();
    res.json({ success: true, status });
  } catch (error) {
    console.error('Error getting webhook status:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É webhook' });
  }
});

// API –¥–ª—è —É–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è webhook
app.post('/api/webhook/toggle', (req, res) => {
  try {
    const { enabled } = req.body;
    
    if (typeof enabled !== 'boolean') {
      return res.status(400).json({ 
        error: '–ü–∞—Ä–∞–º–µ—Ç—Ä enabled –º–∞—î –±—É—Ç–∏ boolean' 
      });
    }
    
    if (!webhookServiceInstance) {
      return res.status(503).json({ 
        error: 'WebhookService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ' 
      });
    }
    
    webhookServiceInstance.setEnabled(enabled);
    
    res.json({ 
      success: true, 
      message: \`Webhook \${enabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}\`,
      enabled 
    });
  } catch (error) {
    console.error('Error toggling webhook:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è webhook' });
  }
});

// Graceful shutdown
process.on('SIGINT', () => {
  pool.end();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –±–æ—Ç–∞
const PORT = process.env.PORT || 3000;

async function startServer() {
  try {
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ Express —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log(\`Server running on port \${PORT}\`);
    });

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram –±–æ—Ç–∞ (—è–∫—â–æ —î —Ç–æ–∫–µ–Ω)
    if (process.env.TELEGRAM_BOT_TOKEN) {
      console.log('üîç –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞...');
      const bot = new SkillKlanBot();
      botInstance = bot;
      console.log('üîç –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ...');
      await bot.start();
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ webhookService –¥–ª—è API —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è
      webhookServiceInstance = bot.webhookService;
      console.log('üîß WebhookService –ø–æ—Å–∏–ª–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ –¥–ª—è API —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è');
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ cron job –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
      bot.reminderService.startReminderCron();
      
      console.log('ü§ñ Telegram bot –∑–∞–ø—É—â–µ–Ω–æ –≤ webhook —Ä–µ–∂–∏–º—ñ');
      console.log('‚è∞ Cron job –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–∞–ø—É—â–µ–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ');
    }

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer();
EOF"

echo "üõë –ó—É–ø–∏–Ω–∫–∞ –ø–æ—Ç–æ—á–Ω–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
run_on_server "cd $PROJECT_PATH && docker compose down || true"

echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—Å—ñ—Ö –ø—Ä–æ—Ü–µ—Å—ñ–≤..."
sleep 5

echo "üöÄ –ó–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ –∑ webhook —Ä–µ–∂–∏–º–æ–º..."
run_on_server "cd $PROJECT_PATH && docker compose up -d"

echo "‚è≥ –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤—ñ—Å—ñ–≤..."
sleep 15

echo "üîç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
run_on_server "cd $PROJECT_PATH && docker compose ps"

echo "üìã –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ª–æ–≥—ñ–≤ —Å–µ—Ä–≤–µ—Ä–∞..."
run_on_server "cd $PROJECT_PATH && docker logs skillklan-server --tail 20"

echo "üß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è API..."
if run_on_server "curl -s http://localhost:3001/api/health | grep -q 'OK'"; then
    echo "‚úÖ API –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ"
else
    echo "‚ö†Ô∏è  API –Ω–µ –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ª–æ–≥–∏"
fi

echo "üîç –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ webhook..."
WEBHOOK_FINAL=$(run_on_server "curl -s 'https://api.telegram.org/bot$BOT_TOKEN/getWebhookInfo'")
echo "–§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞–Ω webhook: $WEBHOOK_FINAL"

echo "üéâ –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo ""
echo "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤—ñ—Å—ñ–≤:"
run_on_server "cd $PROJECT_PATH && docker compose ps"
echo ""
echo "üåê –î–æ—Å—Ç—É–ø–Ω—ñ URL:"
echo "   - API: http://$SERVER_IP:3001"
echo "   - Health: http://$SERVER_IP:3001/api/health"
echo "   - Webhook: https://$SERVER_IP:3001/webhook"
echo "   - Webhook Status: http://$SERVER_IP:3001/api/webhook/status"
echo "   - Webhook Toggle: http://$SERVER_IP:3001/api/webhook/toggle"
