#!/bin/bash

# ========================================
# DOCKER MONITOR –°–ö–†–ò–ü–¢ –î–õ–Ø SKILLKLAN
# ========================================
# –°–∫—Ä–∏–ø—Ç –¥–ª—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤ —Ç–∞ —Å–∏—Å—Ç–µ–º–∏

set -e

# –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è
PROJECT_NAME="skillklan"
PROJECT_DIR="/var/www/skillklan"
LOG_FILE="/var/www/skillklan/logs/monitor.log"
ALERT_EMAIL="admin@skillklan.com"
ALERT_THRESHOLD_CPU=80
ALERT_THRESHOLD_MEMORY=85
ALERT_THRESHOLD_DISK=90

# –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –≤–∏–≤–æ–¥—É
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
PURPLE='\033[0;35m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
log() {
    echo -e "${BLUE}[$(date '+%Y-%m-%d %H:%M:%S')]${NC} $1" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü—ñ—è –ø–æ–º–∏–ª–∫–∏
error() {
    echo -e "${RED}‚ùå $1${NC}" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü—ñ—è —É—Å–ø—ñ—Ö—É
success() {
    echo -e "${GREEN}‚úÖ $1${NC}" | tee -a "$LOG_FILE"
}

# –§—É–Ω–∫—Ü—ñ—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
info() {
    echo -e "${PURPLE}‚ÑπÔ∏è  $1${NC}" | tee -a "$LOG_FILE"
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
create_directories() {
    mkdir -p "$(dirname "$LOG_FILE")"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
check_container_status() {
    log "üê≥ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É Docker –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    
    cd "$PROJECT_DIR"
    
    if [ ! -f "docker-compose.yml" ]; then
        error "docker-compose.yml –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        return 1
    fi
    
    # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
    echo "üìä –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤:"
    docker-compose ps
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –≤—Å—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏ –∑–∞–ø—É—â–µ–Ω—ñ
    if docker-compose ps | grep -q "Exit"; then
        warning "–ó–Ω–∞–π–¥–µ–Ω–æ –∑—É–ø–∏–Ω–µ–Ω—ñ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∏!"
        docker-compose ps | grep "Exit"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ health checks
    echo ""
    log "üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ health checks..."
    
    # PostgreSQL
    if docker-compose exec -T postgres pg_isready -U skillklan_user -d skillklan_db; then
        success "PostgreSQL: Healthy"
    else
        warning "PostgreSQL: Unhealthy"
    fi
    
    # Server
    if curl -f -s http://localhost:3000/api/health > /dev/null; then
        success "Server: Healthy"
    else
        warning "Server: Unhealthy"
    fi
    
    # Nginx
    if curl -f -s http://localhost/health > /dev/null; then
        success "Nginx: Healthy"
    else
        warning "Nginx: Unhealthy"
    fi
}

# –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å—ñ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤
monitor_container_resources() {
    log "üìä –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å—ñ–≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤..."
    
    echo "üíª –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ä–µ—Å—É—Ä—Å—ñ–≤:"
    docker stats --no-stream --format "table {{.Container}}\t{{.CPUPerc}}\t{{.MemUsage}}\t{{.MemPerc}}\t{{.NetIO}}\t{{.BlockIO}}"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CPU —Ç–∞ Memory
    docker stats --no-stream --format "{{.Container}} {{.CPUPerc}} {{.MemPerc}}" | while read container cpu mem; do
        # –í–∏–¥–∞–ª—è—î–º–æ % –∑ CPU —Ç–∞ Memory
        cpu_val=$(echo "$cpu" | sed 's/%//')
        mem_val=$(echo "$mem" | sed 's/%//')
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ CPU
        if (( $(echo "$cpu_val > $ALERT_THRESHOLD_CPU" | bc -l) )); then
            warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container: –í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è CPU: ${cpu_val}%"
        fi
        
        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Memory
        if (( $(echo "$mem_val > $ALERT_THRESHOLD_MEMORY" | bc -l) )); then
            warning "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä $container: –í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è Memory: ${mem_val}%"
        fi
    done
}

# –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤
monitor_system_resources() {
    log "üñ•Ô∏è  –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö —Ä–µ—Å—É—Ä—Å—ñ–≤..."
    
    echo "üíæ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫—É:"
    df -h | grep -E "(Filesystem|/dev/|/var/)"
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫—É
    DISK_USAGE=$(df / | tail -1 | awk '{print $5}' | sed 's/%//')
    if [ "$DISK_USAGE" -gt "$ALERT_THRESHOLD_DISK" ]; then
        warning "–í–∏—Å–æ–∫–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –¥–∏—Å–∫—É: ${DISK_USAGE}%"
    fi
    
    echo ""
    echo "üß† –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–º'—è—Ç—ñ:"
    free -h
    
    echo ""
    echo "üî• –ù–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∏—Å—Ç–µ–º–∏:"
    uptime
    echo "Load average: $(uptime | awk -F'load average:' '{print $2}')"
}

# –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥—ñ–≤
monitor_logs() {
    log "üìù –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥—ñ–≤..."
    
    cd "$PROJECT_DIR"
    
    echo "üîç –û—Å—Ç–∞–Ω–Ω—ñ –ø–æ–º–∏–ª–∫–∏ –≤ –ª–æ–≥–∞—Ö:"
    
    # –ü–æ–º–∏–ª–∫–∏ –≤ Docker –ª–æ–≥–∞—Ö
    echo "üê≥ Docker –ª–æ–≥–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ 20 —Ä—è–¥–∫—ñ–≤):"
    docker-compose logs --tail=20 | grep -i error || echo "–ü–æ–º–∏–ª–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    
    echo ""
    
    # –ü–æ–º–∏–ª–∫–∏ –≤ —Å–∏—Å—Ç–µ–º–Ω–∏—Ö –ª–æ–≥–∞—Ö
    echo "üìã –°–∏—Å—Ç–µ–º–Ω—ñ –ª–æ–≥–∏ (–æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ä—è–¥–∫—ñ–≤):"
    journalctl -u docker.service --since "1 hour ago" | grep -i error | tail -10 || echo "–ü–æ–º–∏–ª–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂—ñ
check_network() {
    log "üåê –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂—ñ..."
    
    echo "üîå –°—Ç–∞—Ç—É—Å –º–µ—Ä–µ–∂–µ–≤–∏—Ö —ñ–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–≤:"
    ip addr show | grep -E "(inet|UP|DOWN)" | grep -v "127.0.0.1"
    
    echo ""
    echo "üåç –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–æ–≤–Ω—ñ—à–Ω—å–æ–≥–æ –∑'—î–¥–Ω–∞–Ω–Ω—è:"
    
    # Ping –¥–æ –∑–æ–≤–Ω—ñ—à–Ω—ñ—Ö —Å–µ—Ä–≤–µ—Ä—ñ–≤
    if ping -c 1 8.8.8.8 > /dev/null 2>&1; then
        success "–ó–æ–≤–Ω—ñ—à–Ω—î –∑'—î–¥–Ω–∞–Ω–Ω—è: OK"
    else
        warning "–ó–æ–≤–Ω—ñ—à–Ω—î –∑'—î–¥–Ω–∞–Ω–Ω—è: FAILED"
    fi
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ DNS
    if nslookup google.com > /dev/null 2>&1; then
        success "DNS: OK"
    else
        warning "DNS: FAILED"
    fi
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤
check_ports() {
    log "üîå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤..."
    
    echo "üì° –í—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ—Ä—Ç–∏:"
    
    # HTTP –ø–æ—Ä—Ç 80
    if netstat -tlnp | grep ":80 " > /dev/null; then
        success "–ü–æ—Ä—Ç 80 (HTTP): –í—ñ–¥–∫—Ä–∏—Ç–∏–π"
    else
        warning "–ü–æ—Ä—Ç 80 (HTTP): –ó–∞–∫—Ä–∏—Ç–∏–π"
    fi
    
    # HTTPS –ø–æ—Ä—Ç 443
    if netstat -tlnp | grep ":443 " > /dev/null; then
        success "–ü–æ—Ä—Ç 443 (HTTPS): –í—ñ–¥–∫—Ä–∏—Ç–∏–π"
    else
        warning "–ü–æ—Ä—Ç 443 (HTTPS): –ó–∞–∫—Ä–∏—Ç–∏–π"
    fi
    
    # API –ø–æ—Ä—Ç 3000
    if netstat -tlnp | grep ":3000 " > /dev/null; then
        success "–ü–æ—Ä—Ç 3000 (API): –í—ñ–¥–∫—Ä–∏—Ç–∏–π"
    else
        warning "–ü–æ—Ä—Ç 3000 (API): –ó–∞–∫—Ä–∏—Ç–∏–π"
    fi
    
    # PostgreSQL –ø–æ—Ä—Ç 5432
    if netstat -tlnp | grep ":5432 " > /dev/null; then
        success "–ü–æ—Ä—Ç 5432 (PostgreSQL): –í—ñ–¥–∫—Ä–∏—Ç–∏–π"
    else
        warning "–ü–æ—Ä—Ç 5432 (PostgreSQL): –ó–∞–∫—Ä–∏—Ç–∏–π"
    fi
}

# –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏
check_security() {
    log "üîí –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏..."
    
    echo "üõ°Ô∏è  –°—Ç–∞—Ç—É—Å firewall:"
    if command -v ufw &> /dev/null; then
        ufw status
    else
        echo "UFW –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"
    fi
    
    echo ""
    echo "üîê SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç–∏:"
    if [ -f "docker/nginx/ssl/skillklan.crt" ]; then
        echo "SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –∑–Ω–∞–π–¥–µ–Ω–æ"
        openssl x509 -in docker/nginx/ssl/skillklan.crt -text -noout | grep -E "(Subject|Not After)" | head -2
    else
        warning "SSL —Å–µ—Ä—Ç–∏—Ñ—ñ–∫–∞—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
    fi
}

# –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—ñ—Ç—É
generate_report() {
    log "üìä –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É..."
    
    REPORT_FILE="/var/www/skillklan/logs/monitor_report_$(date +%Y%m%d_%H%M%S).txt"
    
    {
        echo "========================================"
        echo "–ó–í–Ü–¢ –ú–û–ù–Ü–¢–û–†–ò–ù–ì–£ SKILLKLAN"
        echo "–î–∞—Ç–∞: $(date)"
        echo "========================================"
        echo ""
        
        echo "üê≥ –°–¢–ê–¢–£–° DOCKER –ö–û–ù–¢–ï–ô–ù–ï–†–Ü–í:"
        docker-compose ps
        echo ""
        
        echo "üíª –í–ò–ö–û–†–ò–°–¢–ê–ù–ù–Ø –†–ï–°–£–†–°–Ü–í:"
        docker stats --no-stream
        echo ""
        
        echo "üíæ –°–ò–°–¢–ï–ú–ù–Ü –†–ï–°–£–†–°–ò:"
        df -h
        echo ""
        free -h
        echo ""
        uptime
        echo ""
        
        echo "üîå –ú–ï–†–ï–ñ–ê:"
        netstat -tlnp | grep -E ":(80|443|3000|5432)"
        echo ""
        
        echo "üìù –ü–û–°–õ–Ü–î–ù–Ü –ü–û–ú–ò–õ–ö–ò:"
        docker-compose logs --tail=20 | grep -i error || echo "–ü–æ–º–∏–ª–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
        
    } > "$REPORT_FILE"
    
    success "–ó–≤—ñ—Ç –∑–±–µ—Ä–µ–∂–µ–Ω–æ: $REPORT_FILE"
}

# –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É
main() {
    log "üîç –ü–æ—á–∞—Ç–æ–∫ –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥—É SkillKlan..."
    
    # –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ–π
    create_directories
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∏
    check_container_status
    echo ""
    
    monitor_container_resources
    echo ""
    
    monitor_system_resources
    echo ""
    
    monitor_logs
    echo ""
    
    check_network
    echo ""
    
    check_ports
    echo ""
    
    check_security
    echo ""
    
    # –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É
    generate_report
    
    success "üéâ –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–æ–ø–æ–º–æ–≥–∏
show_help() {
    echo "üîç Docker Monitor Script –¥–ª—è SkillKlan"
    echo ""
    echo "–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: $0 [–∫–æ–º–∞–Ω–¥–∞]"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥–∏:"
    echo "  monitor    - –ü–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º)"
    echo "  status     - –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "  resources  - –†–µ—Å—É—Ä—Å–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "  system     - –°–∏—Å—Ç–µ–º–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏"
    echo "  logs       - –ú–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥—ñ–≤"
    echo "  network    - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–µ—Ä–µ–∂—ñ"
    echo "  ports      - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—ñ–≤"
    echo "  security   - –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±–µ–∑–ø–µ–∫–∏"
    echo "  report     - –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–≤—ñ—Ç—É"
    echo "  help       - –ü–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–ø–æ–º–æ–≥—É"
    echo ""
    echo "–ü—Ä–∏–∫–ª–∞–¥–∏:"
    echo "  $0 monitor                    # –ü–æ–≤–Ω–∏–π –º–æ–Ω—ñ—Ç–æ—Ä–∏–Ω–≥"
    echo "  $0 status                     # –°—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
    echo "  $0 resources                  # –†–µ—Å—É—Ä—Å–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ñ–≤"
}

# –û–±—Ä–æ–±–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç—ñ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä—è–¥–∫–∞
case "${1:-monitor}" in
    "monitor")
        main
        ;;
    "status")
        check_container_status
        ;;
    "resources")
        monitor_container_resources
        ;;
    "system")
        monitor_system_resources
        ;;
    "logs")
        monitor_logs
        ;;
    "network")
        check_network
        ;;
    "ports")
        check_ports
        ;;
    "security")
        check_security
        ;;
    "report")
        generate_report
        ;;
    "help"|"-h"|"--help")
        show_help
        ;;
    *)
        echo "–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞: $1"
        show_help
        exit 1
        ;;
esac



