import { TelegramContact } from './telegram';

// ===== –¢–ò–ü–ò =====

export interface ContactData {
  name: string;
  phone: string;
  email?: string;
  profession: string;
  telegram_id: number;
  contact_source: 'telegram' | 'manual';
}

export interface UserCheckResult {
  exists: boolean;
  user: {
    id: number;
    name: string;
    phone: string;
    email: string;
  } | null;
}

// ===== API –§–£–ù–ö–¶–Ü–á =====

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö
 */
export const checkUserInDatabase = async (telegramId: number): Promise<UserCheckResult> => {
  try {
    const response = await fetch(`/api/check-user/${telegramId}`);
    
    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
    
    return await response.json();
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
    throw error;
  }
};

/**
 * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
 */
export const saveContactToDatabase = async (contactData: ContactData): Promise<{ success: boolean; message: string; user_id: number }> => {
  try {
    const response = await fetch('/api/test-task-request', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(contactData),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }

    return await response.json();
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤:', error);
    throw error;
  }
};

/**
 * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
 */
export const updateTestTaskStatus = async (telegramId: number, profession: string, status: string): Promise<void> => {
  try {
    const response = await fetch('/api/update-test-task-status', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        telegram_id: telegramId,
        profession,
        status,
      }),
    });

    if (!response.ok) {
      throw new Error(`HTTP error! status: ${response.status}`);
    }
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É:', error);
    throw error;
  }
};

// ===== –£–¢–Ü–õ–Ü–¢–ò =====

/**
 * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è Telegram –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –≤ ContactData
 */
export const convertTelegramContactToContactData = (
  telegramContact: TelegramContact,
  profession: string,
  telegramId: number
): ContactData => {
  return {
    name: `${telegramContact.first_name}${telegramContact.last_name ? ` ${telegramContact.last_name}` : ''}`,
    phone: telegramContact.phone_number,
    email: '',
    profession,
    telegram_id: telegramId,
    contact_source: 'telegram',
  };
};

/**
 * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
 */
export const validateContactData = (contactData: ContactData): boolean => {
  return Boolean(
    contactData.name?.trim() &&
    contactData.phone?.trim() &&
    contactData.profession &&
    contactData.telegram_id
  );
};

/**
 * –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
 */
export const downloadTestTask = (profession: string): void => {
  try {
    const pdfPath = `/src/data/test-tasks/${profession}-test-task.pdf`;
    const link = document.createElement('a');
    link.href = pdfPath;
    link.download = `${profession.toUpperCase()}-test-task.pdf`;
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è:', error);
    throw error;
  }
};

/**
 * –ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
 */
export const sendSuccessMessage = (profession: string): void => {
  try {
    const message = `‚úÖ –î—è–∫—É—î–º–æ! –í–∞—à–µ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –ø—Ä–æ—Ñ–µ—Å—ñ—ó ${profession.toUpperCase()} –≥–æ—Ç–æ–≤–µ –¥–æ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è.`;
    console.log('üì§ –ù–∞–¥—Å–∏–ª–∞—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', message);
    
    // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É
    alert(message);
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
  }
};
