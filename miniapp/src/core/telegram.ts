// Telegram WebApp API types
declare global {
  interface Window {
    Telegram?: {
      WebApp?: {
        ready: () => void;
        expand: () => void;
        close: () => void;
        initDataUnsafe?: {
          user?: {
            id: number;
            first_name: string;
            last_name?: string;
            username?: string;
            language_code?: string;
            is_premium?: boolean;
            added_to_attachment_menu?: boolean;
            allows_write_to_pm?: boolean;
            photo_url?: string;
          };
          chat?: {
            id: number;
            type: string;
            title?: string;
            username?: string;
            photo_url?: string;
          };
          chat_type?: string;
          chat_instance?: string;
          start_param?: string;
          can_send_after?: number;
          auth_date?: number;
          hash?: string;
        };
        MainButton?: {
          text: string;
          show: () => void;
          hide: () => void;
          onClick: (callback: () => void) => void;
        };
        BackButton?: {
          show: () => void;
          hide: () => void;
          onClick: (callback: () => void) => void;
        };
        HapticFeedback?: {
          impactOccurred: (style: 'light' | 'medium' | 'heavy') => void;
        };
        // Contact API
        requestContact?: () => Promise<TelegramContact>;
        requestPhoneNumber?: () => Promise<TelegramPhoneNumber>;
      };
    };
    // –û—Ñ—ñ—Ü—ñ–π–Ω—ñ API –¥–ª—è web events –∑–≥—ñ–¥–Ω–æ –∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é
    TelegramWebviewProxy?: {
      postEvent: (eventType: string, eventData: any) => void;
    };
  }
}

// –¢–∏–ø–∏ –¥–ª—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ Telegram
export interface TelegramContact {
  phone_number: string;
  first_name: string;
  last_name?: string;
  user_id?: number;
}

export interface TelegramPhoneNumber {
  phone_number: string;
}

// –û—Å–Ω–æ–≤–Ω—ñ –µ–∫—Å–ø–æ—Ä—Ç–∏
export const WebApp = window.Telegram?.WebApp;

// ===== –ß–ò–°–¢–Ü –§–£–ù–ö–¶–Ü–á –ó–ì–Ü–î–ù–û –ó DRY =====

/**
 * –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è Telegram WebApp
 */
export const initTelegram = (): void => {
  if (WebApp?.ready) {
    WebApp.ready();
    WebApp.expand();
  }
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ Telegram WebApp
 */
export const getTelegramUser = () => {
  return WebApp?.initDataUnsafe?.user;
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ Telegram Contact API
 */
export const canUseTelegramContactAPI = (): boolean => {
  return Boolean(WebApp?.requestContact || WebApp?.requestPhoneNumber);
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —á–µ—Ä–µ–∑ Telegram API
 * @returns Promise –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏ –∞–±–æ null –ø—Ä–∏ –ø–æ–º–∏–ª—Ü—ñ
 */
export const requestContactFromTelegram = async (): Promise<TelegramContact | null> => {
  try {
    if (!canUseTelegramContactAPI()) {
      throw new Error('Telegram Contact API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
    }

    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ requestContact (–ø–æ–≤–Ω—ñ –∫–æ–Ω—Ç–∞–∫—Ç–∏)
    if (WebApp?.requestContact) {
      return await WebApp.requestContact();
    }

    // Fallback –Ω–∞ requestPhoneNumber (—Ç—ñ–ª—å–∫–∏ –Ω–æ–º–µ—Ä)
    if (WebApp?.requestPhoneNumber) {
      const phoneData = await WebApp.requestPhoneNumber();
      return {
        phone_number: phoneData.phone_number,
        first_name: getTelegramUser()?.first_name || '',
        last_name: getTelegramUser()?.last_name
      };
    }

    throw new Error('–ñ–æ–¥–µ–Ω –∑ Contact API –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π');
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ —á–µ—Ä–µ–∑ Telegram:', error);
    return null;
  }
};

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ Telegram WebApp
 */
export const isInTelegramWebApp = (): boolean => {
  return Boolean(window.Telegram?.WebApp);
};

/**
 * –û—Ç—Ä–∏–º–∞–Ω–Ω—è Telegram User ID
 */
export const getTelegramUserId = (): number | null => {
  const user = getTelegramUser();
  return user?.id || null;
};

/**
 * –ó–∞–∫—Ä–∏—Ç—Ç—è Telegram WebApp
 */
/**
 * –ó–∞–∫—Ä–∏—Ç—Ç—è Telegram WebApp —á–µ—Ä–µ–∑ –æ—Ñ—ñ—Ü—ñ–π–Ω—É web_app_close –ø–æ–¥—ñ—é
 * –ó–≥—ñ–¥–Ω–æ –∑ –æ—Ñ—ñ—Ü—ñ–π–Ω–æ—é –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü—ñ—î—é: https://core.telegram.org/api/web-events#web-app-close
 */
export const closeTelegramWebAppWithEvent = (): void => {
  const timestamp = new Date().toISOString();
  console.log(`üîç [${timestamp}] DEBUG: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –æ—Ñ—ñ—Ü—ñ–π–Ω—É web_app_close –ø–æ–¥—ñ—é –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è WebApp`);
  
  // –Ø–ö–Ü–†: –û—Ñ—ñ—Ü—ñ–π–Ω–∞ web_app_close –ø–æ–¥—ñ—è –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è WebApp
  // TODO: –ì–õ–û–ë–ê–õ–¨–ù–Ü –ó–ú–Ü–ù–ò - —Ü–µ —Ç–æ—á–∫–∞ –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–ª—è –≤—ñ–¥–∫–∞—Ç—É
  console.log(`üîç [${timestamp}] DEBUG: window.TelegramWebviewProxy =`, window.TelegramWebviewProxy);
  console.log(`üîç [${timestamp}] DEBUG: window.external =`, window.external);
  console.log(`üîç [${timestamp}] DEBUG: window.parent =`, window.parent);
  console.log(`üîç [${timestamp}] DEBUG: WebApp =`, WebApp);
  console.log(`üîç [${timestamp}] DEBUG: WebApp?.close =`, WebApp?.close);
  console.log(`üîç [${timestamp}] DEBUG: WebApp?.BackButton =`, WebApp?.BackButton);
  console.log(`üîç [${timestamp}] DEBUG: window.location.href =`, window.location.href);
  console.log(`üîç [${timestamp}] DEBUG: window.navigator.userAgent =`, window.navigator.userAgent);
  
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –ø—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–∏–π –≤–∏–∫–ª–∏–∫ WebApp.close()
    if (WebApp?.close) {
      console.log(`üîí [${timestamp}] –ü—Ä–æ–±—É—î–º–æ –ø—Ä—è–º–∏–π –≤–∏–∫–ª–∏–∫ WebApp.close()`);
      try {
        WebApp.close();
        console.log(`‚úÖ [${timestamp}] WebApp.close() –≤–∏–∫–ª–∏–∫–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
        return;
      } catch (closeError) {
        console.error(`‚ùå [${timestamp}] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É WebApp.close():`, closeError);
      }
    }
    
    // –°–ø—Ä–æ–±—É—î–º–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ –æ—Ñ—ñ—Ü—ñ–π–Ω—É web_app_close –ø–æ–¥—ñ—é
    if (typeof window !== 'undefined' && window.TelegramWebviewProxy?.postEvent) {
      console.log(`üì§ [${timestamp}] –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ web_app_close –ø–æ–¥—ñ—é —á–µ—Ä–µ–∑ TelegramWebviewProxy`);
      try {
        window.TelegramWebviewProxy.postEvent('web_app_close', {});
        console.log(`‚úÖ [${timestamp}] web_app_close –ø–æ–¥—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ —á–µ—Ä–µ–∑ TelegramWebviewProxy`);
        return;
      } catch (proxyError) {
        console.error(`‚ùå [${timestamp}] –ü–æ–º–∏–ª–∫–∞ —á–µ—Ä–µ–∑ TelegramWebviewProxy:`, proxyError);
      }
    }
    
    // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π —Å–ø–æ—Å—ñ–± —á–µ—Ä–µ–∑ window.external
    if (typeof window !== 'undefined' && (window.external as any)?.notify) {
      console.log(`üì§ [${timestamp}] –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ web_app_close –ø–æ–¥—ñ—é —á–µ—Ä–µ–∑ window.external`);
      try {
        (window.external as any).notify(JSON.stringify({
          eventType: 'web_app_close',
          eventData: {}
        }));
        console.log(`‚úÖ [${timestamp}] web_app_close –ø–æ–¥—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ window.external`);
        return;
      } catch (externalError) {
        console.error(`‚ùå [${timestamp}] –ü–æ–º–∏–ª–∫–∞ —á–µ—Ä–µ–∑ window.external:`, externalError);
      }
    }
    
    // Fallback —á–µ—Ä–µ–∑ postMessage API
    if (typeof window !== 'undefined' && window.parent?.postMessage) {
      console.log(`üì§ [${timestamp}] –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ web_app_close –ø–æ–¥—ñ—é —á–µ—Ä–µ–∑ postMessage`);
      try {
        window.parent.postMessage(JSON.stringify({
          eventType: 'web_app_close',
          eventData: {}
        }), '*');
        console.log(`‚úÖ [${timestamp}] web_app_close –ø–æ–¥—ñ—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —á–µ—Ä–µ–∑ postMessage`);
        return;
      } catch (postMessageError) {
        console.error(`‚ùå [${timestamp}] –ü–æ–º–∏–ª–∫–∞ —á–µ—Ä–µ–∑ postMessage:`, postMessageError);
      }
    }
    
    // –Ø–∫—â–æ –Ω—ñ—á–æ–≥–æ –Ω–µ —Å–ø—Ä–∞—Ü—é–≤–∞–ª–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ —Å—Ç–∞—Ä–∏–π –º–µ—Ç–æ–¥
    console.warn(`‚ö†Ô∏è [${timestamp}] –û—Ñ—ñ—Ü—ñ–π–Ω—ñ –º–µ—Ç–æ–¥–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback`);
    closeTelegramWebAppWithBackButton();
    
  } catch (error) {
    console.error(`‚ùå [${timestamp}] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ web_app_close –ø–æ–¥—ñ—ó:`, error);
    console.warn(`‚ö†Ô∏è [${timestamp}] –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ fallback –º–µ—Ç–æ–¥`);
    closeTelegramWebAppWithBackButton();
  }
};

/**
 * –ó–∞–∫—Ä–∏—Ç—Ç—è Telegram WebApp —á–µ—Ä–µ–∑ BackButton (fallback)
 * –†—ñ—à–µ–Ω–Ω—è –∑–≥—ñ–¥–Ω–æ –∑ GitHub Issue #566
 */
export const closeTelegramWebAppWithBackButton = (): void => {
  const timestamp = new Date().toISOString();
  console.log(`üîç [${timestamp}] DEBUG: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ BackButton workaround –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è WebApp`);
  console.log(`üîç [${timestamp}] DEBUG: WebApp?.BackButton =`, WebApp?.BackButton);
  console.log(`üîç [${timestamp}] DEBUG: WebApp?.close =`, WebApp?.close);
  console.log(`üîç [${timestamp}] DEBUG: window.location.href =`, window.location.href);
  console.log(`üîç [${timestamp}] DEBUG: window.navigator.userAgent =`, window.navigator.userAgent);
  
  if (WebApp?.BackButton) {
    console.log(`üîô [${timestamp}] –ü–æ–∫–∞–∑—É—î–º–æ BackButton —Ç–∞ –Ω–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è`);
    
    try {
      // –ü–æ–∫–∞–∑—É—î–º–æ BackButton
      WebApp.BackButton.show();
      console.log(`‚úÖ [${timestamp}] BackButton –ø–æ–∫–∞–∑–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
      
      // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫—É
      WebApp.BackButton.onClick(() => {
        const clickTimestamp = new Date().toISOString();
        console.log(`üîí [${clickTimestamp}] –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞—Ç–∏—Å–Ω—É–≤ BackButton - –∑–∞–∫—Ä–∏–≤–∞—î–º–æ WebApp`);
        console.log(`üîí [${clickTimestamp}] DEBUG: WebApp?.close =`, WebApp?.close);
        
        if (WebApp?.close) {
          console.log(`üîí [${clickTimestamp}] –í–∏–∫–ª–∏–∫–∞—î–º–æ WebApp.close()`);
          try {
            WebApp.close();
            console.log(`‚úÖ [${clickTimestamp}] WebApp.close() –≤–∏–∫–ª–∏–∫–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ`);
          } catch (closeError) {
            console.error(`‚ùå [${clickTimestamp}] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É WebApp.close():`, closeError);
          }
        } else {
          console.warn(`‚ö†Ô∏è [${clickTimestamp}] WebApp.close() –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π`);
        }
      });
      
      console.log(`‚úÖ [${timestamp}] BackButton –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è WebApp`);
    } catch (backButtonError) {
      console.error(`‚ùå [${timestamp}] –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Ä–æ–±–æ—Ç—ñ –∑ BackButton:`, backButtonError);
    }
  } else {
    console.warn(`‚ö†Ô∏è [${timestamp}] BackButton –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π`);
    console.warn(`‚ö†Ô∏è [${timestamp}] –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –Ω–µ –≤ Telegram WebApp –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ`);
    console.warn(`‚ö†Ô∏è [${timestamp}] WebApp =`, WebApp);
    console.warn(`‚ö†Ô∏è [${timestamp}] window.Telegram =`, window.Telegram);
    
    // Fallback –¥–ª—è –∑–≤–∏—á–∞–π–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
    if (typeof window !== 'undefined') {
      console.log(`üß™ [${timestamp}] FALLBACK: –°–∏–º—É–ª—é—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è WebApp –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è`);
      alert('‚úÖ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–µ! (–í Telegram WebApp —Ç—É—Ç –∑–∞–∫—Ä–∏—î—Ç—å—Å—è)');
    }
  }
};

/**
 * –ó–∞–∫—Ä–∏—Ç—Ç—è Telegram WebApp (—Å—Ç–∞—Ä–∏–π –º–µ—Ç–æ–¥ - –∑–∞–ª–∏—à–∞—î–º–æ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
 */
export const closeTelegramWebApp = (): void => {
  console.log('üîç DEBUG: –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ—Å—Ç—å WebApp.close()');
  console.log('üîç DEBUG: WebApp =', WebApp);
  console.log('üîç DEBUG: WebApp?.close =', WebApp?.close);
  
  if (WebApp?.close) {
    console.log('üîí –ó–∞–∫—Ä–∏–≤–∞—î–º–æ Telegram WebApp');
    try {
      WebApp.close();
      console.log('‚úÖ WebApp.close() –≤–∏–∫–ª–∏–∫–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–∫–ª–∏–∫—É WebApp.close():', error);
    }
  } else {
    console.warn('‚ö†Ô∏è –§—É–Ω–∫—Ü—ñ—è –∑–∞–∫—Ä–∏—Ç—Ç—è WebApp –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞');
    console.warn('‚ö†Ô∏è –ú–æ–∂–ª–∏–≤–æ, –≤–∏ –Ω–µ –≤ Telegram WebApp –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ');
    console.warn('‚ö†Ô∏è –í –∑–≤–∏—á–∞–π–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ WebApp.close() –Ω–µ –ø—Ä–∞—Ü—é—î');
    
    // Fallback –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –≤ –∑–≤–∏—á–∞–π–Ω–æ–º—É –±—Ä–∞—É–∑–µ—Ä—ñ
    if (typeof window !== 'undefined') {
      console.log('üß™ FALLBACK: –°–∏–º—É–ª—é—î–º–æ –∑–∞–∫—Ä–∏—Ç—Ç—è WebApp –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è');
      // –ú–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ –≤—ñ–∑—É–∞–ª—å–Ω–∏–π —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–∫—Ä–∏—Ç—Ç—è
      alert('‚úÖ –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≥–æ—Ç–æ–≤–µ! (–í Telegram WebApp —Ç—É—Ç –∑–∞–∫—Ä–∏—î—Ç—å—Å—è)');
    }
  }
};