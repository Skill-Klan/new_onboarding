// –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –±–∞–∑–æ—é –¥–∞–Ω–∏—Ö

const { Pool } = require('pg');
const { UserState, ContactData, TaskData } = require('../../bot/types');

class DatabaseService {
  constructor() {
    this.pool = new Pool({
      host: process.env.DB_HOST || 'localhost',
      port: process.env.DB_PORT || 5432,
      database: process.env.DB_NAME || 'skillklan',
      user: process.env.DB_USER || 'postgres',
      password: process.env.DB_PASSWORD || 'password',
    });
  }

  /**
   * –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
   */
  async connect() {
    try {
      console.log('üîç DatabaseService: –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î...');
      const client = await this.pool.connect();
      await client.query('SELECT 1');
      client.release();
      console.log('‚úÖ DatabaseService: –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î —É—Å–ø—ñ—à–Ω–µ');
    } catch (error) {
      console.error('‚ùå DatabaseService: –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î:', error);
      throw error;
    }
  }

  /**
   * –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö
   */
  async disconnect() {
    try {
      await this.pool.end();
      console.log('‚úÖ DatabaseService: –í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –ë–î —É—Å–ø—ñ—à–Ω–µ');
    } catch (error) {
      console.error('‚ùå DatabaseService: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –ë–î:', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ Telegram ID
   */
  async getUserByTelegramId(telegramId) {
    console.log('üîçüîçüîç DatabaseService.getUserByTelegramId: –ü–û–ß–ê–¢–û–ö');
    console.log('üîçüîçüîç DatabaseService.getUserByTelegramId: telegramId =', telegramId);
    
    try {
      const query = `
        SELECT * FROM bot_users 
        WHERE telegram_id = $1
      `;
      console.log('üîçüîçüîç DatabaseService.getUserByTelegramId: –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç...');
      const result = await this.pool.query(query, [telegramId]);
      console.log('üîçüîçüîç DatabaseService.getUserByTelegramId: —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø–∏—Ç—É =', result.rows);
      return result.rows[0] || null;
    } catch (error) {
      console.error('üîçüîçüîç DatabaseService.getUserByTelegramId: –ü–û–ú–ò–õ–ö–ê =', error);
      return null; // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ Telegram ID
   */
  async getUserState(telegramId) {
    try {
      const query = `
        SELECT * FROM bot_users 
        WHERE telegram_id = $1
      `;
      const result = await this.pool.query(query, [telegramId]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', error);
      return null; // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async saveUserState(userState) {
    console.log('üîçüîçüîç DatabaseService.saveUserState: –ü–û–ß–ê–¢–û–ö');
    console.log('üîçüîçüîç DatabaseService.saveUserState: userState =', userState);
    
    try {
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Ç–∞–±–ª–∏—Ü—ñ bot_users
      console.log('üîçüîçüîç DatabaseService.saveUserState: –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
      const stateQuery = `
        INSERT INTO bot_users (
          telegram_id, username, current_step, selected_profession, contact_data, task_sent, task_sent_at, task_deadline, reminders_sent, last_activity, created_at, updated_at
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12)
        ON CONFLICT (telegram_id) 
        DO UPDATE SET
          username = EXCLUDED.username,
          current_step = EXCLUDED.current_step,
          selected_profession = EXCLUDED.selected_profession,
          contact_data = EXCLUDED.contact_data,
          task_sent = EXCLUDED.task_sent,
          task_sent_at = EXCLUDED.task_sent_at,
          task_deadline = EXCLUDED.task_deadline,
          reminders_sent = EXCLUDED.reminders_sent,
          last_activity = EXCLUDED.last_activity,
          updated_at = EXCLUDED.updated_at
        RETURNING *
      `;
      
      const stateValues = [
        userState.telegramId,
        userState.username || null,
        userState.currentStep,
        userState.selectedProfession || null,
        userState.contactData ? JSON.stringify(userState.contactData) : null,
        userState.taskSent || false,
        userState.taskSentAt || null,
        userState.taskDeadline || null,
        userState.remindersSent ? JSON.stringify(userState.remindersSent) : '[]',
        userState.lastActivity || new Date(),
        userState.createdAt || new Date(),
        new Date()
      ];

      const stateResult = await this.pool.query(stateQuery, stateValues);
      console.log('üîçüîçüîç DatabaseService.saveUserState: —Å—Ç–∞–Ω –∑–±–µ—Ä–µ–∂–µ–Ω–æ, result =', stateResult.rows[0]);
      return stateResult.rows[0];
    } catch (error) {
      console.error('üîçüîçüîç DatabaseService.saveUserState: –ü–û–ú–ò–õ–ö–ê =', error);
      // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É, —â–æ–± –±–æ—Ç –ø—Ä–æ–¥–æ–≤–∂—É–≤–∞–≤ –ø—Ä–∞—Ü—é–≤–∞—Ç–∏
      return null;
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É
   */
  async saveContact(userId, contactData) {
    console.log('üîçüîçüîç DatabaseService.saveContact: –ü–û–ß–ê–¢–û–ö');
    console.log('üîçüîçüîç DatabaseService.saveContact: userId =', userId);
    console.log('üîçüîçüîç DatabaseService.saveContact: contactData =', contactData);
    
    try {
      const query = `
        INSERT INTO bot_contacts (
          user_id, phone_number, first_name, last_name, created_at, updated_at
        ) VALUES ($1, $2, $3, $4, $5, $6)
        ON CONFLICT (user_id) 
        DO UPDATE SET
          phone_number = EXCLUDED.phone_number,
          first_name = EXCLUDED.first_name,
          last_name = EXCLUDED.last_name,
          updated_at = EXCLUDED.updated_at
        RETURNING *
      `;
      
      const values = [
        userId,
        contactData.phoneNumber,
        contactData.firstName,
        contactData.lastName,
        new Date(),
        new Date()
      ];

      console.log('üîçüîçüîç DatabaseService.saveContact: –≤–∏–∫–æ–Ω—É—î–º–æ –∑–∞–ø–∏—Ç...');
      console.log('üîçüîçüîç DatabaseService.saveContact: values =', values);
      
      const result = await this.pool.query(query, values);
      console.log('üîçüîçüîç DatabaseService.saveContact: —Ä–µ–∑—É–ª—å—Ç–∞—Ç =', result.rows[0]);
      
      return result.rows[0];
    } catch (error) {
      console.error('üîçüîçüîç DatabaseService.saveContact: –ü–û–ú–ò–õ–ö–ê =', error);
      return null; // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∑–∞ ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getContactByUserId(userId) {
    try {
      const query = `
        SELECT * FROM bot_contacts 
        WHERE user_id = $1
      `;
      const result = await this.pool.query(query, [userId]);
      return result.rows[0] || null;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É:', error);
      return null; // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    }
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –¥–æ—Å—Ç–∞–≤–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  async saveTaskDelivery(userId, taskData) {
    try {
      const query = `
        INSERT INTO bot_task_deliveries (
          user_id, profession, task_title, task_description, 
          task_content, delivered_at, created_at, updated_at
        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
        RETURNING *
      `;
      
      const values = [
        userId,
        taskData.profession,
        taskData.title,
        taskData.description,
        taskData.content,
        new Date(),
        new Date(),
        new Date()
      ];

      const result = await this.pool.query(query, values);
      return result.rows[0];
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –¥–æ—Å—Ç–∞–≤–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:', error);
      return null; // –ù–µ –∫–∏–¥–∞—î–º–æ –ø–æ–º–∏–ª–∫—É
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≤–¥–∞–Ω—å
   */
  async getTaskStatistics() {
    try {
      const query = `
        SELECT 
          profession,
          COUNT(*) as total_deliveries,
          COUNT(DISTINCT user_id) as unique_users,
          DATE(delivered_at) as delivery_date
        FROM bot_task_deliveries 
        GROUP BY profession, DATE(delivered_at)
        ORDER BY delivery_date DESC
      `;
      
      const result = await this.pool.query(query);
      return result.rows;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return []; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –ø—É—Å—Ç–∏–π –º–∞—Å–∏–≤ –∑–∞–º—ñ—Å—Ç—å –∫–∏–¥–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    }
  }

  /**
   * –û—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å—Ç–∞–Ω—ñ–≤
   */
  async cleanupOldStates(cutoffTime) {
    try {
      const query = `
        DELETE FROM user_states 
        WHERE updated_at < $1 
        AND current_step != 'completed'
      `;
      
      const result = await this.pool.query(query, [cutoffTime]);
      return result.rowCount;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö —Å—Ç–∞–Ω—ñ–≤:', error);
      return 0; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ 0 –∑–∞–º—ñ—Å—Ç—å –∫–∏–¥–∞–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤, —è–∫–∏–º –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  async getUsersWithTasks() {
    try {
      const query = `
        SELECT telegram_id, task_sent_at, task_deadline, reminders_sent
        FROM bot_users 
        WHERE task_sent = true 
        AND task_sent_at IS NOT NULL
        ORDER BY task_sent_at ASC
      `;
      
      const result = await this.pool.query(query);
      console.log('üîçüîçüîç DatabaseService.getUsersWithTasks: –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ =', result.rows.length);
      return result.rows;
    } catch (error) {
      console.error('üîçüîçüîç DatabaseService.getUsersWithTasks: –ø–æ–º–∏–ª–∫–∞ =', error);
      return [];
    }
  }

  /**
   * –¢–µ—Å—Ç –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
   */
  async testConnection() {
    try {
      const result = await this.pool.query('SELECT NOW()');
      console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î —É—Å–ø—ñ—à–Ω–µ:', result.rows[0].now);
      return true;
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î:', error);
      return false;
    }
  }

  /**
   * –ó–∞–∫—Ä–∏—Ç—Ç—è –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
   */
  async close() {
    try {
      await this.pool.end();
      console.log('‚úÖ –ó\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î –∑–∞–∫—Ä–∏—Ç–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–∫—Ä–∏—Ç—Ç—è –∑\'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î:', error);
    }
  }
}

module.exports = DatabaseService;
