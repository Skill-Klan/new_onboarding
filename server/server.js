const express = require('express');
const { Pool } = require('pg');
const cors = require('cors');
const helmet = require('helmet');
require('dotenv').config();

// –Ü–º–ø–æ—Ä—Ç –±–æ—Ç–∞
const SkillKlanBot = require('./bot/bot');

const app = express();

// Middleware
app.use(helmet());
app.use(cors({
  origin: process.env.NODE_ENV === 'production' 
    ? ['https://skill-klan.github.io/new_onboarding'] 
    : ['http://localhost:5173', 'https://*.ngrok-free.app']
}));
app.use(express.json());

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ PostgreSQL
const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
});

// –¢–µ—Å—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –ë–î
pool.query('SELECT NOW()', (err, res) => {
  if (err) {
    console.error('Database connection error:', err);
  } else {
    console.log('Database connected successfully');
  }
});

// Health check endpoint
app.get("/api/health", (req, res) => {
  res.json({ status: "ok", timestamp: new Date().toISOString() });
});

// API –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏ –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
app.post('/api/test-task-request', async (req, res) => {
  const client = await pool.connect();
  
  try {
    const { name, phone, email, profession, telegram_id, contact_source = 'manual' } = req.body;
    
    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∞–Ω–∏—Ö
    if (!name || !phone || !profession) {
      return res.status(400).json({ 
        error: '–ù–µ–æ–±—Ö—ñ–¥–Ω–æ –∑–∞–ø–æ–≤–Ω–∏—Ç–∏ —ñ–º\'—è, —Ç–µ–ª–µ—Ñ–æ–Ω —Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—é' 
      });
    }
    
    if (!['qa', 'ba'].includes(profession)) {
      return res.status(400).json({ 
        error: '–ù–µ–≤—ñ—Ä–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—è' 
      });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –¥–∂–µ—Ä–µ–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    if (!['telegram', 'manual'].includes(contact_source)) {
      return res.status(400).json({ 
        error: '–ù–µ–≤—ñ—Ä–Ω–µ –¥–∂–µ—Ä–µ–ª–æ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤' 
      });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
    const cleanPhone = phone.replace(/[^\d]/g, '');
    if (cleanPhone.length !== 10 || !cleanPhone.startsWith('0')) {
      return res.status(400).json({ 
        error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É. –û—á—ñ–∫—É—î—Ç—å—Å—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–∏–π –Ω–æ–º–µ—Ä (10 —Ü–∏—Ñ—Ä, –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0)' 
      });
    }

    // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —ñ–º–µ–Ω—ñ
    if (name.trim().length < 2 || name.trim().length > 50) {
      return res.status(400).json({ 
        error: '–Ü–º\'—è –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 2 –¥–æ 50 —Å–∏–º–≤–æ–ª—ñ–≤' 
      });
    }

    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥–∂–µ—Ä–µ–ª–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    console.log(`üìù –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤ –∑ –¥–∂–µ—Ä–µ–ª–∞: ${contact_source} –¥–ª—è telegram_id: ${telegram_id}`);
    
    await client.query('BEGIN');
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º telegram_id
    let userResult = await client.query(
      'SELECT id FROM users WHERE telegram_id = $1',
      [telegram_id]
    );
    
    let userId;
    
    if (userResult.rows.length === 0) {
      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      console.log(`üë§ –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ telegram_id: ${telegram_id}`);
      const newUserResult = await client.query(
        'INSERT INTO users (telegram_id, name, phone, email) VALUES ($1, $2, $3, $4) RETURNING id',
        [telegram_id, name.trim(), phone, email || '']
      );
      userId = newUserResult.rows[0].id;
      console.log(`‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ –∑ ID: ${userId}`);
    } else {
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      console.log(`üîÑ –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ ID: ${userResult.rows[0].id}`);
      await client.query(
        'UPDATE users SET name = $1, phone = $2, email = $3, updated_at = CURRENT_TIMESTAMP WHERE telegram_id = $4',
        [name.trim(), phone, email || '', telegram_id]
      );
      userId = userResult.rows[0].id;
    }
    
    // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è
    console.log(`üìã –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ ${userId}, –ø—Ä–æ—Ñ–µ—Å—ñ—è: ${profession}`);
    await client.query(
      'INSERT INTO test_task_requests (user_id, profession) VALUES ($1, $2)',
      [userId, profession]
    );
    
    await client.query('COMMIT');
    
    console.log(`‚úÖ –ó–∞—è–≤–∫—É —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. User ID: ${userId}, –î–∂–µ—Ä–µ–ª–æ: ${contact_source}`);
    
    res.json({ 
      success: true, 
      message: '–ó–∞—è–≤–∫—É –Ω–∞ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ',
      user_id: userId,
      contact_source: contact_source
    });
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏:', error);
    res.status(500).json({ 
      error: '–ü–æ–º–∏–ª–∫–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–∫–∏. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.' 
    });
  } finally {
    client.release();
  }
});

// API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
app.get('/api/admin/stats', async (req, res) => {
  try {
    const stats = await pool.query(`
      SELECT 
        profession,
        status,
        COUNT(*) as count
      FROM test_task_requests ttr
      JOIN users u ON ttr.user_id = u.id
      GROUP BY profession, status
      ORDER BY profession, status
    `);
    
    res.json({ success: true, stats: stats.rows });
  } catch (error) {
    console.error('Error getting stats:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏' });
  }
});

// API –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞—è–≤–æ–∫ (–¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤)
app.get('/api/admin/requests', async (req, res) => {
  try {
    const requests = await pool.query(`
      SELECT 
        ttr.id,
        ttr.profession,
        ttr.status,
        ttr.created_at,
        u.name,
        u.phone,
        u.email,
        u.telegram_id
      FROM test_task_requests ttr
      JOIN users u ON ttr.user_id = u.id
      ORDER BY ttr.created_at DESC
    `);
    
    res.json({ success: true, requests: requests.rows });
  } catch (error) {
    console.error('Error getting requests:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∑–∞—è–≤–æ–∫' });
  }
});

// API –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
app.get('/api/check-user/:telegramId', async (req, res) => {
  try {
    const { telegramId } = req.params;
    
    const result = await pool.query(
      'SELECT id, name, phone, email FROM users WHERE telegram_id = $1',
      [telegramId]
    );
    
    if (result.rows.length > 0) {
      const user = result.rows[0];
      res.json({ 
        exists: true, 
        user: {
          id: user.id,
          name: user.name,
          phone: user.phone,
          email: user.email
        }
      });
    } else {
      res.json({ exists: false, user: null });
    }
    
  } catch (error) {
    console.error('Error checking user:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞' });
  }
});

// API –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
app.post('/api/update-test-task-status', async (req, res) => {
  const client = await pool.connect();
  
  try {
    const { telegram_id, profession, status } = req.body;
    
    await client.query('BEGIN');
    
    // –ó–Ω–∞–π—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    const userResult = await client.query(
      'SELECT id FROM users WHERE telegram_id = $1',
      [telegram_id]
    );
    
    if (userResult.rows.length === 0) {
      return res.status(404).json({ error: '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    const userId = userResult.rows[0].id;
    
    // –û–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å –æ—Å—Ç–∞–Ω–Ω—å–æ—ó –∑–∞—è–≤–∫–∏
    const updateResult = await client.query(
      `UPDATE test_task_requests 
       SET status = $1, sent_at = CURRENT_TIMESTAMP 
       WHERE id = (
         SELECT id FROM test_task_requests 
         WHERE user_id = $2 AND profession = $3 
         ORDER BY created_at DESC 
         LIMIT 1
       )`,
      [status, userId, profession]
    );
    
    if (updateResult.rowCount === 0) {
      return res.status(404).json({ error: '–ó–∞—è–≤–∫—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ' });
    }
    
    await client.query('COMMIT');
    
    res.json({ success: true, message: '–°—Ç–∞—Ç—É—Å –æ–Ω–æ–≤–ª–µ–Ω–æ' });
    
  } catch (error) {
    await client.query('ROLLBACK');
    console.error('Error updating test task status:', error);
    res.status(500).json({ error: '–ü–æ–º–∏–ª–∫–∞ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞—Ç—É—Å—É' });
  } finally {
    client.release();
  }
});

// Graceful shutdown
process.on('SIGINT', () => {
  pool.end();
  process.exit(0);
});

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ —Ç–∞ –±–æ—Ç–∞
const PORT = process.env.PORT || 3000;

async function startServer() {
  try {
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ Express —Å–µ—Ä–≤–µ—Ä
    app.listen(PORT, () => {
      console.log(`Server running on port ${PORT}`);
    });

    // –ó–∞–ø—É—Å–∫–∞—î–º–æ Telegram –±–æ—Ç–∞ (—è–∫—â–æ —î —Ç–æ–∫–µ–Ω)
    console.log('üîçüîçüîç –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å —Ç–æ–∫–µ–Ω–∞...');
    console.log('üîçüîçüîç process.env.TELEGRAM_BOT_TOKEN:', process.env.TELEGRAM_BOT_TOKEN ? '–ü–†–ò–°–£–¢–ù–Ü–ô' : '–í–Ü–î–°–£–¢–ù–Ü–ô');
    console.log('üîçüîçüîç –î–æ–≤–∂–∏–Ω–∞ —Ç–æ–∫–µ–Ω–∞ –≤ server.js:', process.env.TELEGRAM_BOT_TOKEN ? process.env.TELEGRAM_BOT_TOKEN.length : 0);
    
    if (process.env.TELEGRAM_BOT_TOKEN) {
      console.log('üîçüîçüîç –¢–æ–∫–µ–Ω –ø—Ä–∏—Å—É—Ç–Ω—ñ–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞...');
      const bot = new SkillKlanBot();
      console.log('üîçüîçüîç –ï–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–æ, –∑–∞–ø—É—Å–∫–∞—î–º–æ...');
      await bot.start();
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ cron job –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å
      bot.reminderService.startReminderCron();
      
      console.log('ü§ñ Telegram bot –∑–∞–ø—É—â–µ–Ω–æ');
      console.log('‚è∞ Cron job –¥–ª—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å –∑–∞–ø—É—â–µ–Ω–æ');
    } else {
      console.log('‚ö†Ô∏è TELEGRAM_BOT_TOKEN –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –±–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω–æ');
    }

  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É —Å–µ—Ä–≤–µ—Ä–∞:', error);
    process.exit(1);
  }
}

startServer();