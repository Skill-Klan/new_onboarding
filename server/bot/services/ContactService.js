// –°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞–º–∏

const { ContactData } = require('../types');

class ContactService {
  constructor(databaseService) {
    this.databaseService = databaseService;
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   */
  validateContact(contact) {
    if (!contact) {
      return { isValid: false, error: '–ö–æ–Ω—Ç–∞–∫—Ç –Ω–µ –Ω–∞–¥–∞–Ω–æ' };
    }

    if (!contact.phone_number) {
      return { isValid: false, error: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –Ω–µ –Ω–∞–¥–∞–Ω–æ' };
    }

    if (!contact.first_name) {
      return { isValid: false, error: '–Ü–º\'—è –Ω–µ –Ω–∞–¥–∞–Ω–æ' };
    }

    // –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const phoneRegex = /^\+?[1-9]\d{1,14}$/;
    if (!phoneRegex.test(contact.phone_number.replace(/\s/g, ''))) {
      return { isValid: false, error: '–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É' };
    }

    return { isValid: true };
  }

  /**
   * –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü—ñ—è Telegram –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ ContactData
   */
  convertTelegramContact(telegramContact) {
    return new ContactData(
      telegramContact.phone_number,
      telegramContact.first_name,
      telegramContact.last_name || null
    );
  }

  /**
   * –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –≤ –ë–î
   */
  async saveContact(userId, contactData) {
    console.log('üîçüîçüîç ContactService.saveContact: –ü–û–ß–ê–¢–û–ö');
    console.log('üîçüîçüîç ContactService.saveContact: userId =', userId);
    console.log('üîçüîçüîç ContactService.saveContact: contactData =', contactData);
    
    try {
      console.log('üîçüîçüîç ContactService.saveContact: –≤–∞–ª—ñ–¥—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç...');
      const validation = this.validateContact(contactData);
      console.log('üîçüîçüîç ContactService.saveContact: validation =', validation);
      
      if (!validation.isValid) {
        throw new Error(validation.error);
      }

      console.log('üîçüîçüîç ContactService.saveContact: –∫–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –∫–æ–Ω—Ç–∞–∫—Ç...');
      const contact = this.convertTelegramContact(contactData);
      console.log('üîçüîçüîç ContactService.saveContact: –∫–æ–Ω–≤–µ—Ä—Ç–æ–≤–∞–Ω–∏–π –∫–æ–Ω—Ç–∞–∫—Ç =', contact);
      
      // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
      console.log('üîçüîçüîç ContactService.saveContact: –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î...');
      const savedContact = await this.databaseService.saveContact(userId, contact);
      console.log('üîçüîçüîç ContactService.saveContact: –∑–±–µ—Ä–µ–∂–µ–Ω–æ –≤ –ë–î =', savedContact);
      
      return contact;
    } catch (error) {
      console.error('üîçüîçüîç ContactService.saveContact: –ü–û–ú–ò–õ–ö–ê =', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getContactByUserId(userId) {
    try {
      return await this.databaseService.getContactByUserId(userId);
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç—É:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ —î –∫–æ–Ω—Ç–∞–∫—Ç —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async hasContact(userId) {
    try {
      const contact = await this.getContactByUserId(userId);
      return contact !== null;
    } catch (error) {
      console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–Ω—Ç–∞–∫—Ç—É:', error);
      return false;
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
   */
  formatPhoneNumber(phoneNumber) {
    // –ü—Ä–∏–±–∏—Ä–∞—î–º–æ –≤—Å—ñ —Å–∏–º–≤–æ–ª–∏ –∫—Ä—ñ–º —Ü–∏—Ñ—Ä —Ç–∞ +
    const cleaned = phoneNumber.replace(/[^\d+]/g, '');
    
    // –î–æ–¥–∞—î–º–æ + —è–∫—â–æ –π–æ–≥–æ –Ω–µ–º–∞—î
    if (!cleaned.startsWith('+')) {
      return '+' + cleaned;
    }
    
    return cleaned;
  }

  /**
   * –ú–∞—Å–∫—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –ª–æ–≥—ñ–≤
   */
  maskPhoneNumber(phoneNumber) {
    if (!phoneNumber || phoneNumber.length < 4) {
      return '***';
    }
    
    const cleaned = phoneNumber.replace(/[^\d+]/g, '');
    const start = cleaned.substring(0, 3);
    const end = cleaned.substring(cleaned.length - 2);
    const middle = '*'.repeat(cleaned.length - 5);
    
    return start + middle + end;
  }
}

module.exports = ContactService;
