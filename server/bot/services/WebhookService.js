// –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ Discord —á–µ—Ä–µ–∑ webhook
const axios = require('axios');

class WebhookService {
  constructor() {
    this.webhookUrl = 'https://discord.com/api/webhooks/1412903925694332998/XDyrZ3asQ80y_NAdv_3lErNylvFUTru2pjZyzpjAm38XLs102DQ-LnUEZXNiPtmUuPWm';
    this.colors = {
      info: 0x3498db,      // –°–∏–Ω—ñ–π - —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      success: 0x2ecc71,   // –ó–µ–ª–µ–Ω–∏–π - —É—Å–ø—ñ—à–Ω—ñ –¥—ñ—ó
      warning: 0xf39c12,   // –ü–æ–º–∞—Ä–∞–Ω—á–µ–≤–∏–π - –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è
      danger: 0xe74c3c,    // –ß–µ—Ä–≤–æ–Ω–∏–π - –∫—Ä–∏—Ç–∏—á–Ω—ñ –ø–æ–¥—ñ—ó
      primary: 0x9b59b6    // –§—ñ–æ–ª–µ—Ç–æ–≤–∏–π - –æ—Å–Ω–æ–≤–Ω—ñ –ø–æ–¥—ñ—ó
    };
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Discord
   */
  async sendMessage(embed) {
    try {
      const payload = {
        embeds: [embed]
      };

      console.log('üîçüîçüîç WebhookService.sendMessage: –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Discord:', JSON.stringify(payload, null, 2));

      const response = await axios.post(this.webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: 10000 // 10 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
      });

      console.log('‚úÖ WebhookService.sendMessage: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord, —Å—Ç–∞—Ç—É—Å:', response.status);
      return true;
    } catch (error) {
      console.error('‚ùå WebhookService.sendMessage: –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Discord:', error.message);
      if (error.response) {
        console.error('‚ùå WebhookService.sendMessage: —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
        console.error('‚ùå WebhookService.sendMessage: –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
      }
      return false;
    }
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º
   */
  async notifyUserStarted(userData) {
    const embed = {
      title: 'üöÄ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º',
      color: this.colors.info,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: '‚è∞ –ß–∞—Å',
          value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   */
  async notifyContactProvided(userData, contactData) {
    const embed = {
      title: 'üìû –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥–∞–≤ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ',
      color: this.colors.success,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${contactData.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üì± –ö–æ–Ω—Ç–∞–∫—Ç',
          value: `**–¢–µ–ª–µ—Ñ–æ–Ω:** \`${contactData.phoneNumber}\`\n**–ü—Ä—ñ–∑–≤–∏—â–µ:** ${contactData.lastName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}`,
          inline: true
        },
        {
          name: 'üéØ –ù–∞–ø—Ä—è–º–æ–∫',
          value: `**–ü—Ä–æ—Ñ–µ—Å—ñ—è:** ${userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst'}`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  async notifyTaskSent(userData, taskData) {
    const professionName = userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst';
    const deadline = new Date(userData.taskDeadline);
    const deadlineTimestamp = Math.floor(deadline.getTime() / 1000);

    const embed = {
      title: 'üìã –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ',
      color: this.colors.primary,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.contactData?.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üéØ –ó–∞–≤–¥–∞–Ω–Ω—è',
          value: `**–ù–∞–ø—Ä—è–º–æ–∫:** ${professionName}\n**–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:** <t:${Math.floor(Date.now() / 1000)}:R>`,
          inline: true
        },
        {
          name: '‚è∞ –î–µ–¥–ª–∞–π–Ω',
          value: `**–ö—ñ–Ω–µ—Ü—å:** <t:${deadlineTimestamp}:F>\n**–ó–∞–ª–∏—à–∏–ª–æ—Å—å:** <t:${deadlineTimestamp}:R>`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ª–∏—à–æ–∫ 1 –¥–Ω—è –¥–æ –¥–µ–¥–ª–∞–π–Ω—É
   */
  async notifyDeadlineWarning(userData) {
    const professionName = userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst';
    const deadline = new Date(userData.taskDeadline);
    const deadlineTimestamp = Math.floor(deadline.getTime() / 1000);

    const embed = {
      title: '‚ö†Ô∏è –ó–∞–ª–∏—à–∏–≤—Å—è 1 –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω—É!',
      color: this.colors.warning,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.contactData?.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üéØ –ó–∞–≤–¥–∞–Ω–Ω—è',
          value: `**–ù–∞–ø—Ä—è–º–æ–∫:** ${professionName}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** \`${userData.contactData?.phoneNumber || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\``,
          inline: true
        },
        {
          name: '‚è∞ –î–µ–¥–ª–∞–π–Ω',
          value: `**–ö—ñ–Ω–µ—Ü—å:** <t:${deadlineTimestamp}:F>\n**–ó–∞–ª–∏—à–∏–ª–æ—Å—å:** <t:${deadlineTimestamp}:R>`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω—É
   */
  async notifyDeadlineToday(userData) {
    const professionName = userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst';
    const deadline = new Date(userData.taskDeadline);
    const deadlineTimestamp = Math.floor(deadline.getTime() / 1000);

    const embed = {
      title: 'üö® –°–¨–û–ì–û–î–ù–Ü –û–°–¢–ê–ù–ù–Ü–ô –î–ï–ù–¨ –î–ï–î–õ–ê–ô–ù–£!',
      color: this.colors.danger,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.contactData?.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üéØ –ó–∞–≤–¥–∞–Ω–Ω—è',
          value: `**–ù–∞–ø—Ä—è–º–æ–∫:** ${professionName}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** \`${userData.contactData?.phoneNumber || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\``,
          inline: true
        },
        {
          name: '‚è∞ –î–µ–¥–ª–∞–π–Ω',
          value: `**–ö—ñ–Ω–µ—Ü—å:** <t:${deadlineTimestamp}:F>\n**–ó–∞–ª–∏—à–∏–ª–æ—Å—å:** <t:${deadlineTimestamp}:R>`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot ‚Ä¢ –ù–ï–ì–ê–ô–ù–û –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º!'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
   */
  async notifyTaskCompleted(userData) {
    const professionName = userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst';
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    const completionTime = new Date();
    const taskSentTime = userData.taskSentAt ? new Date(userData.taskSentAt) : null;
    
    let executionTimeText = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
    if (taskSentTime) {
      const timeDiffMs = completionTime.getTime() - taskSentTime.getTime();
      const timeDiffHours = Math.floor(timeDiffMs / (1000 * 60 * 60));
      const timeDiffDays = Math.floor(timeDiffHours / 24);
      
      if (timeDiffDays > 0) {
        executionTimeText = `${timeDiffDays} –¥–Ω. ${timeDiffHours % 24} –≥–æ–¥.`;
      } else if (timeDiffHours > 0) {
        executionTimeText = `${timeDiffHours} –≥–æ–¥.`;
      } else {
        const timeDiffMinutes = Math.floor(timeDiffMs / (1000 * 60));
        executionTimeText = `${timeDiffMinutes} —Ö–≤.`;
      }
    }

    const embed = {
      title: '‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
      color: this.colors.success,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.contactData?.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üéØ –ó–∞–≤–¥–∞–Ω–Ω—è',
          value: `**–ù–∞–ø—Ä—è–º–æ–∫:** ${professionName}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** \`${userData.contactData?.phoneNumber || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\``,
          inline: true
        },
        {
          name: '‚è∞ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
          value: `**–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** <t:${Math.floor(completionTime.getTime() / 1000)}:F>\n**–í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞:** ${executionTimeText}`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot ‚Ä¢ –ì–æ—Ç–æ–≤–æ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }
}

module.exports = WebhookService;
