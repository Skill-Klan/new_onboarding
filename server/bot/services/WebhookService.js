// –°–µ—Ä–≤—ñ—Å –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤ Discord —á–µ—Ä–µ–∑ webhook
const axios = require('axios');
const webhookConfig = require('../../config/webhook.config');

class WebhookService {
  constructor() {
    this.config = webhookConfig;
    this.webhookUrl = this.config.webhookUrl;
    this.colors = this.config.colors;
    this.enabled = this.config.enabled;
    this.timeout = this.config.timeout;
    this.notifications = this.config.notifications;
    this.logging = this.config.logging;
    
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ—ó –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    if (this.logging.enabled) {
      console.log('üîß WebhookService: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');
      console.log(`üîß WebhookService: Webhook ${this.enabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`);
      console.log(`üîß WebhookService: URL: ${this.webhookUrl ? '–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ'}`);
    }
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Discord
   */
  async sendMessage(embed) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ webhook
    if (!this.enabled) {
      if (this.logging.enabled && this.logging.logLevel === 'debug') {
        console.log('üîß WebhookService.sendMessage: Webhook –≤–∏–º–∫–Ω–µ–Ω–æ, –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î—Ç—å—Å—è');
      }
      return true; // –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ true, —â–æ–± –Ω–µ –≤–ø–ª–∏–≤–∞—Ç–∏ –Ω–∞ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞
    }

    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å URL
    if (!this.webhookUrl) {
      console.warn('‚ö†Ô∏è WebhookService.sendMessage: Webhook URL –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
      return false;
    }

    try {
      const payload = {
        embeds: [embed]
      };

      if (this.logging.enabled && this.logging.logLevel === 'debug') {
        console.log('üîç WebhookService.sendMessage: –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≤ Discord:', JSON.stringify(payload, null, 2));
      }

      const response = await axios.post(this.webhookUrl, payload, {
        headers: {
          'Content-Type': 'application/json'
        },
        timeout: this.timeout
      });

      if (this.logging.enabled) {
        console.log('‚úÖ WebhookService.sendMessage: –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Discord, —Å—Ç–∞—Ç—É—Å:', response.status);
      }
      return true;
    } catch (error) {
      console.error('‚ùå WebhookService.sendMessage: –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Discord:', error.message);
      if (error.response) {
        console.error('‚ùå WebhookService.sendMessage: —Å—Ç–∞—Ç—É—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.status);
        console.error('‚ùå WebhookService.sendMessage: –¥–∞–Ω—ñ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:', error.response.data);
      }
      return false;
    }
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó –∑ –±–æ—Ç–æ–º
   */
  async notifyUserStarted(userData) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (!this.notifications.userStarted) {
      if (this.logging.enabled && this.logging.logLevel === 'debug') {
        console.log('üîß WebhookService.notifyUserStarted: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó –≤–∏–º–∫–Ω–µ–Ω–æ');
      }
      return true;
    }

    const embed = {
      title: 'üöÄ –ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø–æ—á–∞–≤ –≤–∑–∞—î–º–æ–¥—ñ—é –∑ –±–æ—Ç–æ–º',
      color: this.colors.info,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: '‚è∞ –ß–∞—Å',
          value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏
   */
  async notifyUserReady(userData) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (!this.notifications.userReady) {
      if (this.logging.enabled && this.logging.logLevel === 'debug') {
        console.log('üîß WebhookService.notifyUserReady: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å –≤–∏–º–∫–Ω–µ–Ω–æ');
      }
      return true;
    }

    const embed = {
      title: 'üöÄ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –≥–æ—Ç–æ–≤–∏–π —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏',
      color: this.colors.info,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üéØ –ù–∞–ø—Ä—è–º–æ–∫',
          value: `**–ü—Ä–æ—Ñ–µ—Å—ñ—è:** ${userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst'}`,
          inline: true
        },
        {
          name: '‚è∞ –ß–∞—Å',
          value: `<t:${Math.floor(Date.now() / 1000)}:F>`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–∞–¥–∞–Ω–Ω—è –∫–æ–Ω—Ç–∞–∫—Ç–Ω–∏—Ö –¥–∞–Ω–∏—Ö
   */
  async notifyContactProvided(userData, contactData) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (!this.notifications.contactProvided) {
      if (this.logging.enabled && this.logging.logLevel === 'debug') {
        console.log('üîß WebhookService.notifyContactProvided: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∫–æ–Ω—Ç–∞–∫—Ç–∏ –≤–∏–º–∫–Ω–µ–Ω–æ');
      }
      return true;
    }

    const embed = {
      title: 'üìû –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞–¥–∞–≤ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ñ –¥–∞–Ω—ñ',
      color: this.colors.success,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${contactData.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üì± –ö–æ–Ω—Ç–∞–∫—Ç',
          value: `**–¢–µ–ª–µ—Ñ–æ–Ω:** \`${contactData.phoneNumber}\`\n**–ü—Ä—ñ–∑–≤–∏—â–µ:** ${contactData.lastName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}`,
          inline: true
        },
        {
          name: 'üéØ –ù–∞–ø—Ä—è–º–æ–∫',
          value: `**–ü—Ä–æ—Ñ–µ—Å—ñ—è:** ${userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst'}`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è
   */
  async notifyTaskSent(userData, taskData) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (!this.notifications.taskSent) {
      if (this.logging.enabled && this.logging.logLevel === 'debug') {
        console.log('üîß WebhookService.notifyTaskSent: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ');
      }
      return true;
    }

    const professionName = userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst';
    const deadline = new Date(userData.taskDeadline);
    const deadlineTimestamp = Math.floor(deadline.getTime() / 1000);

    const embed = {
      title: 'üìã –¢–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ',
      color: this.colors.primary,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.contactData?.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üéØ –ó–∞–≤–¥–∞–Ω–Ω—è',
          value: `**–ù–∞–ø—Ä—è–º–æ–∫:** ${professionName}\n**–í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ:** <t:${Math.floor(Date.now() / 1000)}:R>`,
          inline: true
        },
        {
          name: '‚è∞ –î–µ–¥–ª–∞–π–Ω',
          value: `**–ö—ñ–Ω–µ—Ü—å:** <t:${deadlineTimestamp}:F>\n**–ó–∞–ª–∏—à–∏–ª–æ—Å—å:** <t:${deadlineTimestamp}:R>`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–ª–∏—à–æ–∫ 1 –¥–Ω—è –¥–æ –¥–µ–¥–ª–∞–π–Ω—É
   */
  async notifyDeadlineWarning(userData) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (!this.notifications.deadlineWarning) {
      if (this.logging.enabled && this.logging.logLevel === 'debug') {
        console.log('üîß WebhookService.notifyDeadlineWarning: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –¥–µ–¥–ª–∞–π–Ω—É –≤–∏–º–∫–Ω–µ–Ω–æ');
      }
      return true;
    }

    const professionName = userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst';
    const deadline = new Date(userData.taskDeadline);
    const deadlineTimestamp = Math.floor(deadline.getTime() / 1000);

    const embed = {
      title: '‚ö†Ô∏è –ó–∞–ª–∏—à–∏–≤—Å—è 1 –¥–µ–Ω—å –¥–æ –¥–µ–¥–ª–∞–π–Ω—É!',
      color: this.colors.warning,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.contactData?.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üéØ –ó–∞–≤–¥–∞–Ω–Ω—è',
          value: `**–ù–∞–ø—Ä—è–º–æ–∫:** ${professionName}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** \`${userData.contactData?.phoneNumber || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\``,
          inline: true
        },
        {
          name: '‚è∞ –î–µ–¥–ª–∞–π–Ω',
          value: `**–ö—ñ–Ω–µ—Ü—å:** <t:${deadlineTimestamp}:F>\n**–ó–∞–ª–∏—à–∏–ª–æ—Å—å:** <t:${deadlineTimestamp}:R>`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É—î—Ç—å—Å—è –∑–≤\'—è–∑–∞—Ç–∏—Å—è –∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω—É
   */
  async notifyDeadlineToday(userData) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (!this.notifications.deadlineToday) {
      if (this.logging.enabled && this.logging.logLevel === 'debug') {
        console.log('üîß WebhookService.notifyDeadlineToday: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –æ—Å—Ç–∞–Ω–Ω—ñ–π –¥–µ–Ω—å –¥–µ–¥–ª–∞–π–Ω—É –≤–∏–º–∫–Ω–µ–Ω–æ');
      }
      return true;
    }

    const professionName = userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst';
    const deadline = new Date(userData.taskDeadline);
    const deadlineTimestamp = Math.floor(deadline.getTime() / 1000);

    const embed = {
      title: 'üö® –°–¨–û–ì–û–î–ù–Ü –û–°–¢–ê–ù–ù–Ü–ô –î–ï–ù–¨ –î–ï–î–õ–ê–ô–ù–£!',
      color: this.colors.danger,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.contactData?.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üéØ –ó–∞–≤–¥–∞–Ω–Ω—è',
          value: `**–ù–∞–ø—Ä—è–º–æ–∫:** ${professionName}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** \`${userData.contactData?.phoneNumber || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\``,
          inline: true
        },
        {
          name: '‚è∞ –î–µ–¥–ª–∞–π–Ω',
          value: `**–ö—ñ–Ω–µ—Ü—å:** <t:${deadlineTimestamp}:F>\n**–ó–∞–ª–∏—à–∏–ª–æ—Å—å:** <t:${deadlineTimestamp}:R>`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot ‚Ä¢ –ù–ï–ì–ê–ô–ù–û –∑–≤\'—è–∂—ñ—Ç—å—Å—è –∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–º!'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–µ–º
   */
  async notifyTaskCompleted(userData) {
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —É–≤—ñ–º–∫–Ω–µ–Ω–æ —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    if (!this.notifications.taskCompleted) {
      if (this.logging.enabled && this.logging.logLevel === 'debug') {
        console.log('üîß WebhookService.notifyTaskCompleted: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∑–∞–≤–¥–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ');
      }
      return true;
    }

    const professionName = userData.selectedProfession === 'QA' ? 'QA Engineer' : 'Business Analyst';
    
    // –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —á–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
    const completionTime = new Date();
    const taskSentTime = userData.taskSentAt ? new Date(userData.taskSentAt) : null;
    
    let executionTimeText = '–ù–µ –≤–∫–∞–∑–∞–Ω–æ';
    if (taskSentTime) {
      const timeDiffMs = completionTime.getTime() - taskSentTime.getTime();
      const timeDiffHours = Math.floor(timeDiffMs / (1000 * 60 * 60));
      const timeDiffDays = Math.floor(timeDiffHours / 24);
      
      if (timeDiffDays > 0) {
        executionTimeText = `${timeDiffDays} –¥–Ω. ${timeDiffHours % 24} –≥–æ–¥.`;
      } else if (timeDiffHours > 0) {
        executionTimeText = `${timeDiffHours} –≥–æ–¥.`;
      } else {
        const timeDiffMinutes = Math.floor(timeDiffMs / (1000 * 60));
        executionTimeText = `${timeDiffMinutes} —Ö–≤.`;
      }
    }

    const embed = {
      title: '‚úÖ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–∞–≤–µ—Ä—à–∏–≤ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è',
      color: this.colors.success,
      fields: [
        {
          name: 'üë§ –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á',
          value: `**–Ü–º'—è:** ${userData.contactData?.firstName || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Username:** @${userData.username || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\n**Telegram ID:** \`${userData.telegramId}\``,
          inline: true
        },
        {
          name: 'üéØ –ó–∞–≤–¥–∞–Ω–Ω—è',
          value: `**–ù–∞–ø—Ä—è–º–æ–∫:** ${professionName}\n**–¢–µ–ª–µ—Ñ–æ–Ω:** \`${userData.contactData?.phoneNumber || '–ù–µ –≤–∫–∞–∑–∞–Ω–æ'}\``,
          inline: true
        },
        {
          name: '‚è∞ –ß–∞—Å –≤–∏–∫–æ–Ω–∞–Ω–Ω—è',
          value: `**–ó–∞–≤–µ—Ä—à–µ–Ω–æ:** <t:${Math.floor(completionTime.getTime() / 1000)}:F>\n**–í–∏–∫–æ–Ω–∞–Ω–æ –∑–∞:** ${executionTimeText}`,
          inline: true
        }
      ],
      footer: {
        text: 'SkillKlan Onboarding Bot ‚Ä¢ –ì–æ—Ç–æ–≤–æ –¥–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏'
      },
      timestamp: new Date().toISOString()
    };

    return await this.sendMessage(embed);
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó webhook
   */
  updateConfig(newConfig) {
    this.config = { ...this.config, ...newConfig };
    this.enabled = this.config.enabled;
    this.webhookUrl = this.config.webhookUrl;
    this.timeout = this.config.timeout;
    this.notifications = this.config.notifications;
    this.logging = this.config.logging;
    
    if (this.logging.enabled) {
      console.log('üîß WebhookService: –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞');
      console.log(`üîß WebhookService: Webhook ${this.enabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`);
    }
  }

  /**
   * –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è webhook
   */
  setEnabled(enabled) {
    this.enabled = enabled;
    if (this.logging.enabled) {
      console.log(`üîß WebhookService: Webhook ${enabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`);
    }
  }

  /**
   * –£–≤—ñ–º–∫–Ω–µ–Ω–Ω—è/–≤–∏–º–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
   */
  setNotificationEnabled(type, enabled) {
    if (this.notifications.hasOwnProperty(type)) {
      this.notifications[type] = enabled;
      if (this.logging.enabled) {
        console.log(`üîß WebhookService: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è ${type} ${enabled ? '—É–≤—ñ–º–∫–Ω–µ–Ω–æ' : '–≤–∏–º–∫–Ω–µ–Ω–æ'}`);
      }
    } else {
      console.warn(`‚ö†Ô∏è WebhookService: –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${type}`);
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É webhook
   */
  getStatus() {
    return {
      enabled: this.enabled,
      webhookUrl: this.webhookUrl ? '–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '–Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ',
      notifications: this.notifications,
      logging: this.logging
    };
  }
}

module.exports = WebhookService;
