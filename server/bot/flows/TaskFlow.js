/**
 * TaskFlow - Flow –¥–ª—è –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω—å
 */

const BaseFlow = require('./BaseFlow');
const { BotStep } = require('../types');
const MessageTemplates = require('../templates/messages');
const KeyboardTemplates = require('../templates/keyboards');

class TaskFlow extends BaseFlow {
  constructor(services) {
    super(services);
    this.userStateService = services.userStateService;
    this.contactService = services.contactService;
    this.taskService = services.taskService;
    this.webhookService = services.webhookService;
    this.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è TaskFlow');
  }

  async canHandle(ctx) {
    const userState = ctx.state.userState;
    if (!userState) return false;
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–ª–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –Ω–∞ –∫—Ä–æ—Ü—ñ TASK_DELIVERY
    return userState.currentStep === BotStep.TASK_DELIVERY;
  }

  async canHandleCallback(ctx) {
    const userState = ctx.state.userState;
    if (!userState) return false;
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ callback –¥–ª—è –∑–¥–∞—á—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
    return ctx.callbackQuery?.data === 'submit_task';
  }

  async handle(ctx) {
    this.log('–û–±—Ä–æ–±–∫–∞ –∑–∞–≤–¥–∞–Ω–Ω—è');
    
    try {
      const userState = ctx.state.userState;
      if (!userState) {
        await this.safeReply(ctx, MessageTemplates.getErrorMessage());
        return;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –≤–∏–±—Ä–∞–Ω–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—è
      if (!userState.selectedProfession) {
        this.log('–ü—Ä–æ—Ñ–µ—Å—ñ—è –Ω–µ –≤–∏–±—Ä–∞–Ω–∞');
        await this.safeReply(ctx, '–ü–æ–º–∏–ª–∫–∞: –ø—Ä–æ—Ñ–µ—Å—ñ—è –Ω–µ –≤–∏–±—Ä–∞–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ /start');
        return;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è
      const taskInfo = this.taskService.getTaskInfo(userState.selectedProfession);
      if (!taskInfo) {
        this.log('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
        await this.safeReply(ctx, '–ü–æ–º–∏–ª–∫–∞: –∑–∞–≤–¥–∞–Ω–Ω—è –¥–ª—è —Ü—ñ—î—ó –ø—Ä–æ—Ñ–µ—Å—ñ—ó –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ —ñ—Å–Ω—É—î —Ñ–∞–π–ª –∑–∞–≤–¥–∞–Ω–Ω—è
      const fileExists = await this.taskService.taskFileExists(userState.selectedProfession);
      if (!fileExists) {
        this.log('–§–∞–π–ª –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ —ñ—Å–Ω—É—î');
        await this.safeReply(ctx, '–ü–æ–º–∏–ª–∫–∞: —Ñ–∞–π–ª –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
        return;
      }

      // –û—Ç—Ä–∏–º—É—î–º–æ —à–ª—è—Ö –¥–æ —Ñ–∞–π–ª—É
      const filePath = this.taskService.getTaskFilePath(userState.selectedProfession);
      this.log('–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª:', filePath);

      // –ü–∞—É–∑–∞ 2.5 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é —Ñ–∞–π–ª—É
      this.log('–ü–∞—É–∑–∞ 2.5 —Å–µ–∫—É–Ω–¥–∏ –ø–µ—Ä–µ–¥ –≤—ñ–¥–ø—Ä–∞–≤–∫–æ—é —Ñ–∞–π–ª—É');
      await new Promise(resolve => setTimeout(resolve, 2500));

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ —Ñ–∞–π–ª
      await ctx.replyWithDocument(
        { source: filePath },
        {
          caption: `üìã ${taskInfo.title}\n\n${taskInfo.description}\n\n‚è∞ –¢–µ—Ä–º—ñ–Ω –≤–∏–∫–æ–Ω–∞–Ω–Ω—è: ${taskInfo.deadline}\n\n–í—ñ—Ä–∏–º–æ –≤ —Ç–µ–±–µ ‚Äî –≤–ø–µ—Ä–µ–¥ –¥–æ –ø–µ—Ä–µ–º–æ–≥–∏! üöÄ`
        }
      );

      this.log('–§–∞–π–ª –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

      // –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      await this.userStateService.markTaskSent(userState.telegramId);
      this.log('–°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ webhook –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è
      try {
        const updatedUserState = await this.userStateService.getState(userState.telegramId);
        const taskData = {
          profession: userState.selectedProfession,
          title: taskInfo.title,
          deadline: taskInfo.deadline
        };
        await this.webhookService.notifyTaskSent(updatedUserState, taskData);
        this.log('Webhook –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (webhookError) {
        console.error('‚ùå TaskFlow: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ webhook:', webhookError);
        // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É webhook
      }

      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥
      this.log('–ü–ª–∞–Ω—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∫–Ω–æ–ø–∫–∏ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥');
      setTimeout(async () => {
        try {
          await ctx.reply(
            MessageTemplates.getTaskSubmissionPromptMessage(),
            KeyboardTemplates.getTaskCompletionKeyboard()
          );
          this.log('–ö–Ω–æ–ø–∫–∞ –∑–¥–∞—á—ñ –∑–∞–≤–¥–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞');
        } catch (error) {
          console.error('‚ùå TaskFlow: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–Ω–æ–ø–∫–∏:', error);
        }
      }, 10000); // 10 —Å–µ–∫—É–Ω–¥

    } catch (error) {
      console.error('‚ùå TaskFlow: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–∞–≤–¥–∞–Ω–Ω—è:', error);
      await this.safeReply(ctx, '–í–∏–±–∞—á—Ç–µ, —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∑–∞–≤–¥–∞–Ω–Ω—è. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.');
    }
  }

  async handleCallback(ctx) {
    this.log('–û–±—Ä–æ–±–∫–∞ callback –∑–¥–∞—á—ñ –∑–∞–≤–¥–∞–Ω–Ω—è');
    
    try {
      const userState = ctx.state.userState;
      if (!userState) {
        await this.safeReply(ctx, MessageTemplates.getErrorMessage());
        return;
      }

      // –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –∑–¥–∞—á—ñ –∑–∞–≤–¥–∞–Ω–Ω—è
      await this.safeReply(ctx, '–î—è–∫—É—é –∑–∞ –∑–¥–∞—á—É –∑–∞–≤–¥–∞–Ω–Ω—è! –ú–∏ –∑–≤\'—è–∂–µ–º–æ—Å—è –∑ –≤–∞–º–∏ –Ω–µ–∑–∞–±–∞—Ä–æ–º.');
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
      await this.userStateService.updateStep(userState.telegramId, BotStep.COMPLETED);
      
      this.log('–ó–∞–≤–¥–∞–Ω–Ω—è –∑–¥–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå TaskFlow: –ü–æ–º–∏–ª–∫–∞ –∑–¥–∞—á—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:', error);
      await this.safeReply(ctx, MessageTemplates.getErrorMessage());
    }
  }
}

module.exports = TaskFlow;
