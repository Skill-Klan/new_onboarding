/**
 * BaseFlow - –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –≤—Å—ñ—Ö flows
 * 
 * –†–µ–∞–ª—ñ–∑—É—î Chain of Responsibility pattern.
 * –ö–æ–∂–µ–Ω flow –≤–∏—Ä—ñ—à—É—î —á–∏ –º–æ–∂–µ –≤—ñ–Ω –æ–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è.
 */

class BaseFlow {
  constructor(databaseService, webhookService) {
    this.databaseService = databaseService;
    this.webhookService = webhookService;
    this.name = this.constructor.name;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–µ flow –æ–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * –ú–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –ø—ñ–¥–∫–ª–∞—Å–∞—Ö
   */
  async canHandle(ctx) {
    throw new Error('canHandle method must be implemented');
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–µ flow –æ–±—Ä–æ–±–∏—Ç–∏ callback query
   * –ú–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –ø—ñ–¥–∫–ª–∞—Å–∞—Ö
   */
  async canHandleCallback(ctx) {
    return false;
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   * –ú–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –ø—ñ–¥–∫–ª–∞—Å–∞—Ö
   */
  async handle(ctx) {
    throw new Error('handle method must be implemented');
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î callback query
   * –ú–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –ø—ñ–¥–∫–ª–∞—Å–∞—Ö
   */
  async handleCallback(ctx) {
    throw new Error('handleCallback method must be implemented');
  }

  /**
   * –ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  async safeReply(ctx, message, keyboard = null) {
    try {
      if (keyboard) {
        await ctx.reply(message, keyboard);
      } else {
        await ctx.reply(message);
      }
    } catch (error) {
      console.error(`‚ùå ${this.name}: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:`, error);
      throw error;
    }
  }

  /**
   * –ë–µ–∑–ø–µ—á–Ω–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∞ callback –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
   */
  async safeAnswerCbQuery(ctx, text = null) {
    try {
      await ctx.answerCbQuery(text);
    } catch (error) {
      console.error(`‚ùå ${this.name}: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ callback:`, error);
    }
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –¥—ñ–π flow
   */
  log(action, details = '') {
    console.log(`üîÑ ${this.name}: ${action} ${details}`);
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ flow
   */
  getInfo() {
    return {
      name: this.name,
      canHandle: typeof this.canHandle === 'function',
      canHandleCallback: typeof this.canHandleCallback === 'function'
    };
  }
}

module.exports = BaseFlow;
