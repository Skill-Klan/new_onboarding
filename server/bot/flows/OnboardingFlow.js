/**
 * OnboardingFlow - –û—Å–Ω–æ–≤–Ω–∏–π flow –¥–ª—è –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
 * 
 * –í—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞:
 * - –ü–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó (/start)
 * - –í–∏–±—ñ—Ä –ø—Ä–æ—Ñ–µ—Å—ñ—ó (QA/BA)
 * - –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏
 */

const BaseFlow = require('./BaseFlow');
const { BotStep, Profession } = require('../types');
const MessageTemplates = require('../templates/messages');
const KeyboardTemplates = require('../templates/keyboards');

class OnboardingFlow extends BaseFlow {
  constructor(databaseService, webhookService) {
    super(databaseService, webhookService);
    this.log('–Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è OnboardingFlow');
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–µ –æ–±—Ä–æ–±–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  async canHandle(ctx) {
    const message = ctx.message?.text;
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –∫–æ–º–∞–Ω–¥—É /start
    if (message === '/start') {
      this.log('–ú–æ–∂–µ –æ–±—Ä–æ–±–∏—Ç–∏: –∫–æ–º–∞–Ω–¥–∞ /start');
      return true;
    }
    
    return false;
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ –º–æ–∂–µ –æ–±—Ä–æ–±–∏—Ç–∏ callback query
   */
  async canHandleCallback(ctx) {
    const callbackData = ctx.callbackQuery?.data;
    this.log('canHandleCallback: callbackData =', callbackData);
    this.log('canHandleCallback: ctx.callbackQuery =', ctx.callbackQuery);
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—ñ—Ä –ø—Ä–æ—Ñ–µ—Å—ñ—ó
    if (callbackData?.startsWith('profession_')) {
      this.log('‚úÖ –ú–æ–∂–µ –æ–±—Ä–æ–±–∏—Ç–∏ callback: –≤–∏–±—ñ—Ä –ø—Ä–æ—Ñ–µ—Å—ñ—ó');
      return true;
    }
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏
    if (callbackData === 'ready_to_try') {
      this.log('‚úÖ –ú–æ–∂–µ –æ–±—Ä–æ–±–∏—Ç–∏ callback: –≥–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏');
      return true;
    }
    
    this.log('‚ùå –ù–µ –º–æ–∂–µ –æ–±—Ä–æ–±–∏—Ç–∏ callback:', callbackData);
    return false;
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  async handle(ctx) {
    this.log('–û–±—Ä–æ–±–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
    
    const message = ctx.message?.text;
    
    if (message === '/start') {
      await this.handleStart(ctx);
    }
  }

  /**
   * –û–±—Ä–æ–±–ª—è—î callback query
   */
  async handleCallback(ctx) {
    this.log('–û–±—Ä–æ–±–∫–∞ callback query');
    
    const callbackData = ctx.callbackQuery?.data;
    
    if (callbackData?.startsWith('profession_')) {
      await this.handleProfessionSelection(ctx, callbackData);
    } else if (callbackData === 'ready_to_try') {
      await this.handleReadyToTry(ctx);
    }
    
    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ callback
    await this.safeAnswerCbQuery(ctx);
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start
   */
  async handleStart(ctx) {
    this.log('–û–±—Ä–æ–±–∫–∞ –∫–æ–º–∞–Ω–¥–∏ /start');
    
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      const userInfo = this.getUserInfo(ctx);
      this.log('–û—Ç—Ä–∏–º–∞–Ω–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userInfo);
      
      if (!userInfo) {
        this.log('‚ùå –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
        await this.safeReply(ctx, MessageTemplates.getErrorMessage());
        return;
      }
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –∞–±–æ —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      let userState = ctx.userState;
      if (!userState) {
        this.log('‚ö†Ô∏è userState –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
        userState = await this.getOrCreateUser(userInfo);
        this.log('–°—Ç–≤–æ—Ä–µ–Ω–æ/–∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userState);
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –≤ —Å—Ç–∞–Ω—ñ —Ç–∞ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î
      if (userState) {
        userState.username = userInfo.username;
        userState.userId = userInfo.id;
        
        // –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –≤ –ë–î
        await this.databaseService.updateUser(userState.telegram_id, {
          username: userInfo.username,
          userId: userInfo.id
        });
        this.log('–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –ë–î');
      }
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ webhook –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó
      try {
        const webhookData = {
          telegramId: userState?.telegram_id || userInfo.id,
          username: userInfo.username,
          firstName: userInfo.first_name,
          lastName: userInfo.last_name
        };
        await this.webhookService.notifyUserStarted(webhookData);
        this.log('Webhook –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } catch (webhookError) {
        console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ webhook:', webhookError);
        // –ù–µ –∑—É–ø–∏–Ω—è—î–º–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É webhook
      }
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø—Ä–∏–≤—ñ—Ç–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
      const message = MessageTemplates.getWelcomeMessage();
      const keyboard = KeyboardTemplates.getProfessionKeyboard();
      
      await this.safeReply(ctx, message, keyboard);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      if (userState) {
        await this.updateUserStep(userState.telegram_id, BotStep.PROFESSION_SELECTION);
      } else {
        this.log('‚ö†Ô∏è userState –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –Ω–µ –º–æ–∂–µ–º–æ –æ–Ω–æ–≤–∏—Ç–∏ –∫—Ä–æ–∫');
      }
      
      this.log('–ö–æ–º–∞–Ω–¥–∞ /start –æ–±—Ä–æ–±–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ /start:', error);
      await this.safeReply(ctx, MessageTemplates.getErrorMessage());
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—ñ—ó
   */
  async handleProfessionSelection(ctx, callbackData) {
    this.log('üîç handleProfessionSelection: callbackData =', callbackData);
    this.log('üîç handleProfessionSelection: ctx.callbackQuery =', ctx.callbackQuery);
    this.log('üîç handleProfessionSelection: ctx.state =', ctx.state);
    
    try {
      // –í–∏—Ç—è–≥—É—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é –∑ callback_data
      this.log('üîç –í–∏—Ç—è–≥—É—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é –∑ callback_data...');
      const profession = this.extractProfession(callbackData);
      this.log('üîç –í–∏—Ç—è–≥–Ω—É—Ç–∞ –ø—Ä–æ—Ñ–µ—Å—ñ—è:', profession);
      
      if (!profession) {
        this.log('‚ùå –ü—Ä–æ—Ñ–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞, –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–º–∏–ª–∫—É');
        await this.safeReply(ctx, MessageTemplates.getErrorMessage());
        return;
      }
      
      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      this.log('üîç –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
      this.log('üîç ctx.userState =', ctx.userState);
      this.log('üîç ctx.state =', ctx.state);
      this.log('üîç ctx =', Object.keys(ctx));
      let userState = ctx.userState;
      this.log('üîç –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userState);
      
      if (!userState) {
        this.log('‚ö†Ô∏è –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
        const userInfo = this.getUserInfo(ctx);
        if (userInfo) {
          userState = await this.getOrCreateUser(userInfo);
          this.log('–°—Ç–≤–æ—Ä–µ–Ω–æ/–∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userState);
        } else {
          this.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
          await this.safeReply(ctx, MessageTemplates.getErrorMessage());
          return;
        }
      }
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é
      this.log('üîç –û–Ω–æ–≤–ª—é—î–º–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é –≤ –ë–î...');
      await this.databaseService.updateUser(userState.telegram_id, { 
        selected_profession: profession,
        last_activity: new Date()
      });
      this.log('‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞ –≤ –ë–î:', profession);
      
      // –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–∞ PROFESSION_SELECTION
      this.log('üîç –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
      await this.databaseService.updateUser(userState.telegram_id, { 
        current_step: BotStep.PROFESSION_SELECTION,
        last_activity: new Date()
      });
      this.log('‚úÖ –ö—Ä–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –æ–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ PROFESSION_SELECTION');
      
      // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ–ø–∏—Å –ø—Ä–æ—Ñ–µ—Å—ñ—ó
      this.log('–û—Ç—Ä–∏–º—É—î–º–æ –æ–ø–∏—Å –ø—Ä–æ—Ñ–µ—Å—ñ—ó...');
      const description = this.getProfessionDescription(profession);
      this.log('–û–ø–∏—Å –ø—Ä–æ—Ñ–µ—Å—ñ—ó:', description.substring(0, 100) + '...');
      
      this.log('–û—Ç—Ä–∏–º—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É...');
      const keyboard = KeyboardTemplates.getReadyToTryKeyboard();
      this.log('–ö–ª–∞–≤—ñ–∞—Ç—É—Ä–∞:', JSON.stringify(keyboard, null, 2));
      
      this.log('–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é...');
      await this.safeReply(ctx, description, keyboard);
      this.log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
      
      this.log('‚úÖ –ü—Ä–æ—Ñ–µ—Å—ñ—è –æ–±—Ä–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ:', profession);
      
    } catch (error) {
      console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞ –≤–∏–±–æ—Ä—É –ø—Ä–æ—Ñ–µ—Å—ñ—ó:', error);
      console.error('‚ùå Stack trace:', error.stack);
      await this.safeReply(ctx, MessageTemplates.getErrorMessage());
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏
   */
  async handleReadyToTry(ctx) {
    this.log('–û–±—Ä–æ–±–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏');
    
    try {
      // –û—Ç—Ä–∏–º—É—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      let userState = ctx.userState;
      if (!userState) {
        this.log('‚ö†Ô∏è –°—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–≤–æ—Ä—é—î–º–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞...');
        const userInfo = this.getUserInfo(ctx);
        if (userInfo) {
          userState = await this.getOrCreateUser(userInfo);
          this.log('–°—Ç–≤–æ—Ä–µ–Ω–æ/–∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', userState);
        } else {
          this.log('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
          await this.safeReply(ctx, MessageTemplates.getErrorMessage());
          return;
        }
      }
      
      if (!userState.selected_profession) {
        this.log('–ü—Ä–æ—Ñ–µ—Å—ñ—è –Ω–µ –≤–∏–±—Ä–∞–Ω–∞');
        await this.safeReply(ctx, MessageTemplates.getErrorMessage());
        return;
      }
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É
      this.log('–ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç—É...');
      const hasContact = await this.hasUserContact(userState.telegram_id);
      this.log('hasContact =', hasContact);

      if (hasContact) {
        // –Ø–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç –≤–∂–µ —î, –æ–¥—Ä–∞–∑—É –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è
        this.log('–ö–æ–Ω—Ç–∞–∫—Ç –≤–∂–µ —î, –Ω–∞–¥—Å–∏–ª–∞—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è');
        await this.safeReply(ctx, '–ù–∞–¥—Å–∏–ª–∞—é –¥–ª—è —Ç–µ–±–µ —Ç–µ—Å—Ç–æ–≤–µ –∑–∞–≤–¥–∞–Ω–Ω—è.');
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –Ω–∞ TASK_DELIVERY
        await this.updateUserStep(userState.telegram_id, BotStep.TASK_DELIVERY);
        
        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–≤–¥–∞–Ω–Ω—è —á–µ—Ä–µ–∑ TaskFlow
        const TaskFlow = require('./TaskFlow');
        const taskFlow = new TaskFlow(this.databaseService, this.webhookService);
        await taskFlow.handleTaskDelivery(ctx, userState);
      } else {
        // –Ø–∫—â–æ –∫–æ–Ω—Ç–∞–∫—Ç—É –Ω–µ–º–∞—î, –∑–∞–ø–∏—Ç—É—î–º–æ –π–æ–≥–æ
        this.log('–ö–æ–Ω—Ç–∞–∫—Ç –≤—ñ–¥—Å—É—Ç–Ω—ñ–π, –∑–∞–ø–∏—Ç—É—î–º–æ');
        
        // –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
        this.log('–û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫ –Ω–∞ CONTACT_REQUEST');
        await this.updateUserStep(userState.telegram_id, BotStep.CONTACT_REQUEST);

        // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—É
        this.log('–í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑–∞–ø–∏—Ç –∫–æ–Ω—Ç–∞–∫—Ç—É');
        await this.safeReply(
          ctx, 
          MessageTemplates.getContactRequestMessage(),
          KeyboardTemplates.getContactKeyboard()
        );
      }
      
      this.log('–ì–æ—Ç–æ–≤–Ω—ñ—Å—Ç—å —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –æ–±—Ä–æ–±–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ');
      
    } catch (error) {
      console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—ñ —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏:', error);
      await this.safeReply(ctx, MessageTemplates.getErrorMessage());
    }
  }

  /**
   * –ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ TaskFlow
   */
  async transitionToTaskFlow(ctx, userState) {
    this.log('–ü–µ—Ä–µ—Ö—ñ–¥ –¥–æ TaskFlow');
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –∫—Ä–æ–∫
    await this.updateUserStep(userState.telegramId, BotStep.TASK_DELIVERY);
    
    // –¢—É—Ç –º–∞—î –±—É—Ç–∏ –ª–æ–≥—ñ–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ TaskFlow
    // –ü–æ–∫–∏ —â–æ –ø—Ä–æ—Å—Ç–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await this.safeReply(ctx, '–ó–∞–≤–¥–∞–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –Ω–µ–∑–∞–±–∞—Ä–æ–º.');
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  getUserInfo(ctx) {
    this.log('getUserInfo: ctx.from =', ctx.from);
    this.log('getUserInfo: ctx.message =', ctx.message);
    this.log('getUserInfo: ctx.callbackQuery =', ctx.callbackQuery);
    
    const from = ctx.from || ctx.message?.from || ctx.callbackQuery?.from;
    this.log('getUserInfo: from =', from);
    
    if (!from) {
      this.log('‚ùå getUserInfo: from –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return null;
    }
    
    const userInfo = {
      id: from.id,
      username: from.username,
      first_name: from.first_name,
      last_name: from.last_name
    };
    
    this.log('getUserInfo: userInfo =', userInfo);
    return userInfo;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∞–±–æ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async getOrCreateUser(userInfo) {
    try {
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤ –ë–î
      const existingUser = await this.databaseService.getUserByTelegramId(userInfo.id);
      
      if (existingUser) {
        this.log('–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ë–î');
        return existingUser;
      }
      
      // –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
      this.log('–°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞');
      const newUser = await this.databaseService.createUser({
        telegram_id: userInfo.id,
        username: userInfo.username,
        first_name: userInfo.first_name,
        last_name: userInfo.last_name,
        current_step: BotStep.START,
        selected_profession: null,
        contact_data: null,
        task_sent: false,
        last_activity: new Date(),
        created_at: new Date()
      });
      
      return newUser;
    } catch (error) {
      console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞ getOrCreateUser:', error);
      throw error;
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑–∞ Telegram ID
   */
  async getUserByTelegramId(telegramId) {
    try {
      return await this.databaseService.getUserByTelegramId(telegramId);
    } catch (error) {
      console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞ getUserByTelegramId:', error);
      throw error;
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—Ä–æ–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async updateUserStep(telegramId, step) {
    try {
      this.log('–û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫—Ä–æ–∫—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', step);
      await this.databaseService.updateUser(telegramId, { 
        current_step: step,
        last_activity: new Date()
      });
    } catch (error) {
      console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞ updateUserStep:', error);
      throw error;
    }
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async updateUserProfession(telegramId, profession) {
    try {
      this.log('–û–Ω–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:', profession);
      await this.databaseService.updateUser(telegramId, { 
        selected_profession: profession,
        last_activity: new Date()
      });
    } catch (error) {
      console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞ updateUserProfession:', error);
      throw error;
    }
  }

  /**
   * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∫–æ–Ω—Ç–∞–∫—Ç—É
   */
  async hasUserContact(telegramId) {
    try {
      const contact = await this.databaseService.getContactByUserId(telegramId);
      return contact !== null;
    } catch (error) {
      console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞ hasUserContact:', error);
      return false;
    }
  }

  /**
   * –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –ø—Ä–æ—Ñ–µ—Å—ñ—ó –∑ callback_data
   */
  extractProfession(callbackData) {
    this.log('extractProfession: callbackData =', callbackData);
    this.log('extractProfession: typeof callbackData =', typeof callbackData);
    
    if (callbackData === 'profession_QA') {
      this.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é QA');
      return Profession.QA;
    } else if (callbackData === 'profession_BA') {
      this.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Ñ–µ—Å—ñ—é BA');
      return Profession.BA;
    }
    
    this.log('‚ùå –ü—Ä–æ—Ñ–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è callbackData:', callbackData);
    return null;
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –æ–ø–∏—Å—É –ø—Ä–æ—Ñ–µ—Å—ñ—ó
   */
  getProfessionDescription(profession) {
    switch (profession) {
      case Profession.QA:
        return MessageTemplates.getQADescription();
      case Profession.BA:
        return MessageTemplates.getBADescription();
      default:
        return MessageTemplates.getErrorMessage();
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
   */
  async handleError(ctx, error) {
    console.error('‚ùå OnboardingFlow: –ü–æ–º–∏–ª–∫–∞:', error);
    await this.safeReply(ctx, BotConfig.getErrorMessage());
  }
}

module.exports = OnboardingFlow;
