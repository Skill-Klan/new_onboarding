// –ë–∞–∑–æ–≤–∏–π –∫–ª–∞—Å –¥–ª—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞

const { BotStep } = require('../types');

class BaseHandler {
  constructor(userStateService, contactService, taskService) {
    this.userStateService = userStateService;
    this.contactService = contactService;
    this.taskService = taskService;
  }

  /**
   * –û—Å–Ω–æ–≤–Ω–∏–π –º–µ—Ç–æ–¥ –æ–±—Ä–æ–±–∫–∏
   */
  async handle(ctx, userState) {
    try {
      // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Ö—ñ–¥–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
      this.logRequest(ctx, userState);
      
      // –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞–Ω—É
      if (!this.validateState(userState)) {
        await this.handleInvalidState(ctx, userState);
        return;
      }

      // –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∞
      await this.execute(ctx, userState);
      
      // –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É
      await this.updateUserState(ctx, userState);
      
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –≤ –æ–±—Ä–æ–±–Ω–∏–∫—É ${this.constructor.name}:`, error);
      await this.handleError(ctx, error);
    }
  }

  /**
   * –í–∏–∫–æ–Ω–∞–Ω–Ω—è –ª–æ–≥—ñ–∫–∏ –æ–±—Ä–æ–±–Ω–∏–∫–∞ (–º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –ø—ñ–¥–∫–ª–∞—Å–∞—Ö)
   */
  async execute(ctx, userState) {
    throw new Error('–ú–µ—Ç–æ–¥ execute –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤ –ø—ñ–¥–∫–ª–∞—Å—ñ');
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –∫—Ä–æ–∫—É (–º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ –≤ –ø—ñ–¥–∫–ª–∞—Å–∞—Ö)
   */
  getNextStep() {
    throw new Error('–ú–µ—Ç–æ–¥ getNextStep –º–∞—î –±—É—Ç–∏ —Ä–µ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π –≤ –ø—ñ–¥–∫–ª–∞—Å—ñ');
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  validateState(userState) {
    return userState && userState.telegramId;
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ–≥–æ —Å—Ç–∞–Ω—É
   */
  async handleInvalidState(ctx, userState) {
    const { MessageTemplates } = require('../templates/messages');
    await ctx.reply(MessageTemplates.getErrorMessage());
    
    // –°–∫–∏–¥–∞—î–º–æ —Å—Ç–∞–Ω –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
    await this.userStateService.resetState(userState.telegramId);
  }

  /**
   * –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å—Ç–∞–Ω—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  async updateUserState(ctx, userState) {
    const nextStep = this.getNextStep();
    if (nextStep && nextStep !== userState.currentStep) {
      await this.userStateService.updateStep(userState.telegramId, nextStep);
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
   */
  async handleError(ctx, error) {
    const { MessageTemplates } = require('../templates/messages');
    await ctx.reply(MessageTemplates.getErrorMessage());
  }

  /**
   * –õ–æ–≥—É–≤–∞–Ω–Ω—è –∑–∞–ø–∏—Ç—É
   */
  logRequest(ctx, userState) {
    const logData = {
      handler: this.constructor.name,
      userId: userState.telegramId,
      username: userState.username,
      currentStep: userState.currentStep,
      messageType: ctx.message ? ctx.message.text : 'callback',
      timestamp: new Date().toISOString()
    };
    
    console.log('Bot Request:', JSON.stringify(logData, null, 2));
  }

  /**
   * –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –æ–±—Ä–æ–±–∫–æ—é –ø–æ–º–∏–ª–æ–∫
   */
  async safeReply(ctx, message, keyboard = null) {
    try {
      console.log('üì§ safeReply: –ü–æ—á–∞—Ç–æ–∫ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è');
      console.log('üì§ safeReply: message:', message);
      console.log('üì§ safeReply: keyboard:', keyboard);
      
      if (keyboard) {
        console.log('üì§ safeReply: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é');
        await ctx.reply(message, keyboard);
        console.log('‚úÖ safeReply: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–æ—é –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
      } else {
        console.log('üì§ safeReply: –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏');
        await ctx.reply(message);
        console.log('‚úÖ safeReply: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
    } catch (error) {
      console.error('‚ùå safeReply: –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', error);
      console.error('‚ùå safeReply: Stack trace:', error.stack);
      
      // –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏
      try {
        console.log('üîÑ safeReply: –°–ø—Ä–æ–±—É—î–º–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏');
        await ctx.reply(message);
        console.log('‚úÖ safeReply: –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±–µ–∑ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—ñ—Å–ª—è –ø–æ–º–∏–ª–∫–∏');
      } catch (retryError) {
        console.error('‚ùå safeReply: –ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', retryError);
        console.error('‚ùå safeReply: Retry stack trace:', retryError.stack);
      }
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞
   */
  getUserInfo(ctx) {
    const user = ctx.from;
    return {
      id: user.id,
      username: user.username,
      firstName: user.first_name,
      lastName: user.last_name
    };
  }
}

module.exports = BaseHandler;
