// –û–±—Ä–æ–±–Ω–∏–∫ –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥ —Ç–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

const BaseHandler = require('./BaseHandler');
const { BotStep } = require('../types');

class UnknownHandler extends BaseHandler {
  async execute(ctx, userState) {
    const MessageTemplates = require('../templates/messages');
    const KeyboardTemplates = require('../templates/keyboards');
    
    // –í–∏–∑–Ω–∞—á–∞—î–º–æ —Ç–∏–ø –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    const messageType = this.getMessageType(ctx);
    
    // –û–±—Ä–æ–±–ª—è—î–º–æ —Ä—ñ–∑–Ω—ñ —Ç–∏–ø–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    switch (messageType) {
      case 'text':
        await this.handleTextMessage(ctx, userState);
        break;
      case 'callback':
        await this.handleCallbackQuery(ctx, userState);
        break;
      default:
        await this.safeReply(ctx, MessageTemplates.getUnknownCommandMessage());
    }
  }

  /**
   * –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  getMessageType(ctx) {
    if (ctx.message && ctx.message.text) {
      return 'text';
    } else if (ctx.callbackQuery) {
      return 'callback';
    }
    return 'unknown';
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
   */
  async handleTextMessage(ctx, userState) {
    const MessageTemplates = require('../templates/messages');
    const KeyboardTemplates = require('../templates/keyboards');
    
    const messageText = ctx.message.text.toLowerCase();
    
    // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–∞ –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞
    if (messageText.includes('–ø—Ä–∏–≤—ñ—Ç') || messageText.includes('hello')) {
      await this.safeReply(
        ctx, 
        '–ü—Ä–∏–≤—ñ—Ç! üëã –ù–∞–ø–∏—à—ñ—Ç—å /start –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –∑ –±–æ—Ç–æ–º.',
        KeyboardTemplates.getMainMenuKeyboard()
      );
    } else if (messageText.includes('–¥–æ–ø–æ–º–æ–≥–∞') || messageText.includes('help')) {
      await this.safeReply(
        ctx, 
        '–î–ª—è –ø–æ—á–∞—Ç–∫—É —Ä–æ–±–æ—Ç–∏ –Ω–∞–ø–∏—à—ñ—Ç—å /start\n–î–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É FAQ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂—á–µ.',
        KeyboardTemplates.getMainMenuKeyboard()
      );
    } else {
      // –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
      await this.safeReply(
        ctx, 
        MessageTemplates.getUnknownCommandMessage(),
        KeyboardTemplates.getMainMenuKeyboard()
      );
    }
  }

  /**
   * –û–±—Ä–æ–±–∫–∞ callback –∑–∞–ø–∏—Ç—É
   */
  async handleCallbackQuery(ctx, userState) {
    const MessageTemplates = require('../templates/messages');
    
    // –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î–º–æ callback
    await ctx.answerCbQuery('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∞');
    
    // –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –Ω–µ–≤—ñ–¥–æ–º—É –∫–æ–º–∞–Ω–¥—É
    await this.safeReply(ctx, MessageTemplates.getUnknownCommandMessage());
  }

  getNextStep() {
    // –ù–µ –∑–º—ñ–Ω—é—î–º–æ –∫—Ä–æ–∫ –¥–ª—è –Ω–µ–≤—ñ–¥–æ–º–∏—Ö –∫–æ–º–∞–Ω–¥
    return null;
  }

  /**
   * –í–∞–ª—ñ–¥–∞—Ü—ñ—è —Å—Ç–∞–Ω—É –¥–ª—è —Ü—å–æ–≥–æ –æ–±—Ä–æ–±–Ω–∏–∫–∞
   */
  validateState(userState) {
    // –ù–µ–≤—ñ–¥–æ–º—ñ –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂—É—Ç—å –æ–±—Ä–æ–±–ª—è—Ç–∏—Å—è –Ω–∞ –±—É–¥—å-—è–∫–æ–º—É –µ—Ç–∞–ø—ñ
    return super.validateState(userState);
  }
}

module.exports = UnknownHandler;
