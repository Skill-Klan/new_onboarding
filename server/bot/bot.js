// –û—Å–Ω–æ–≤–Ω–∏–π —Ñ–∞–π–ª Telegram –±–æ—Ç–∞

const { Telegraf } = require('telegraf');
const { BotStep } = require('./types');

// –Ü–º–ø–æ—Ä—Ç —Å–µ—Ä–≤—ñ—Å—ñ–≤
const DatabaseService = require('../shared/database/DatabaseService');
const UserStateService = require('./services/UserStateService');
const ContactService = require('./services/ContactService');
const TaskService = require('./services/TaskService');

// –Ü–º–ø–æ—Ä—Ç –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
const StartHandler = require('./handlers/StartHandler');
const ProfessionHandler = require('./handlers/ProfessionHandler');
const ReadyToTryHandler = require('./handlers/ReadyToTryHandler');
const ContactHandler = require('./handlers/ContactHandler');
const TaskHandler = require('./handlers/TaskHandler');
const TaskSubmissionHandler = require('./handlers/TaskSubmissionHandler');

const RestartHandler = require('./handlers/RestartHandler');
const UnknownHandler = require('./handlers/UnknownHandler');

class SkillKlanBot {
  constructor() {
    this.bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
    this.databaseService = new DatabaseService();
    this.userStateService = new UserStateService(this.databaseService);
    this.contactService = new ContactService(this.databaseService);
    this.taskService = new TaskService(this.databaseService);
    
    this.setupHandlers();
    this.setupMiddleware();
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
   */
  setupHandlers() {
    // –°—Ç–≤–æ—Ä—é—î–º–æ –æ–±—Ä–æ–±–Ω–∏–∫–∏
    const startHandler = new StartHandler(this.userStateService, this.contactService, this.taskService);
    const professionHandler = new ProfessionHandler(this.userStateService, this.contactService, this.taskService);
    const readyToTryHandler = new ReadyToTryHandler(this.userStateService, this.contactService, this.taskService);
    const contactHandler = new ContactHandler(this.userStateService, this.contactService, this.taskService);
    const taskHandler = new TaskHandler(this.userStateService, this.contactService, this.taskService);
    const taskSubmissionHandler = new TaskSubmissionHandler(this.userStateService, this.contactService, this.taskService);

    const restartHandler = new RestartHandler(this.userStateService, this.contactService, this.taskService);
    const unknownHandler = new UnknownHandler(this.userStateService, this.contactService, this.taskService);

    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.start(async (ctx) => {
      console.log('üîç bot.js: –û—Ç—Ä–∏–º—É—î–º–æ userState –¥–ª—è', ctx.from.id);
      const userState = await this.userStateService.getState(ctx.from.id);
      console.log('üîç bot.js: userState =', userState);
      console.log('üîç bot.js: –í–∏–∫–ª–∏–∫–∞—î–º–æ startHandler.handle');
      await startHandler.handle(ctx, userState);
    });

    // Callback –æ–±—Ä–æ–±–Ω–∏–∫–∏
    this.bot.action('profession_QA', async (ctx) => {
      const userState = await this.userStateService.getState(ctx.from.id);
      await professionHandler.handle(ctx, userState);
    });

    this.bot.action('profession_BA', async (ctx) => {
      const userState = await this.userStateService.getState(ctx.from.id);
      await professionHandler.handle(ctx, userState);
    });

    this.bot.action('ready_to_try', async (ctx) => {
      const userState = await this.userStateService.getState(ctx.from.id);
      await readyToTryHandler.handle(ctx, userState);
    });

    this.bot.action('submit_task', async (ctx) => {
      const userState = await this.userStateService.getState(ctx.from.id);
      await taskSubmissionHandler.handle(ctx, userState);
    });



    this.bot.action('restart', async (ctx) => {
      const userState = await this.userStateService.getState(ctx.from.id);
      await restartHandler.handle(ctx, userState);
    });

    // –û–±—Ä–æ–±–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç—ñ–≤
    this.bot.on('contact', async (ctx) => {
      const userState = await this.userStateService.getState(ctx.from.id);
      await contactHandler.handle(ctx, userState);
    });

    // –û–±—Ä–æ–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    this.bot.on('text', async (ctx) => {
      const userState = await this.userStateService.getState(ctx.from.id);
      
      // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ, —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∑–∞–≤–¥–∞–Ω–Ω—è
      if (userState.currentStep === BotStep.TASK_DELIVERY && 
          userState.contactData && 
          !userState.taskSent) {
        await taskHandler.handle(ctx, userState);
      } else {
        await unknownHandler.handle(ctx, userState);
      }
    });

    // –û–±—Ä–æ–±–∫–∞ –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    this.bot.on('message', async (ctx) => {
      const userState = await this.userStateService.getState(ctx.from.id);
      await unknownHandler.handle(ctx, userState);
    });
  }

  /**
   * –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è middleware
   */
  setupMiddleware() {
    // –õ–æ–≥—É–≤–∞–Ω–Ω—è –≤—Å—ñ—Ö –∑–∞–ø–∏—Ç—ñ–≤
    this.bot.use(async (ctx, next) => {
      const start = Date.now();
      console.log(`üì® –í—Ö—ñ–¥–Ω–∏–π –∑–∞–ø–∏—Ç: ${ctx.updateType} –≤—ñ–¥ ${ctx.from?.id}`);
      
      await next();
      
      const duration = Date.now() - start;
      console.log(`‚è±Ô∏è –û–±—Ä–æ–±–∫–∞ –∑–∞–π–Ω—è–ª–∞: ${duration}ms`);
    });

    // –û–±—Ä–æ–±–∫–∞ –ø–æ–º–∏–ª–æ–∫
    this.bot.catch((err, ctx) => {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ –±–æ—Ç—ñ:', err);
      
      const { MessageTemplates } = require('./templates/messages');
      ctx.reply(MessageTemplates.getErrorMessage()).catch(console.error);
    });
  }

  /**
   * –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
   */
  async start() {
    try {
      // –¢–µ—Å—Ç—É—î–º–æ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ë–î
      await this.databaseService.testConnection();
      
      // –ó–∞–ø—É—Å–∫–∞—î–º–æ –±–æ—Ç–∞
      await this.bot.launch();
      console.log('ü§ñ SkillKlan Bot –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!');
      
      // –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ graceful shutdown
      process.once('SIGINT', () => this.stop('SIGINT'));
      process.once('SIGTERM', () => this.stop('SIGTERM'));
      
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞:', error);
      throw error;
    }
  }

  /**
   * –ó—É–ø–∏–Ω–∫–∞ –±–æ—Ç–∞
   */
  async stop(signal) {
    console.log(`üõë –û—Ç—Ä–∏–º–∞–Ω–æ —Å–∏–≥–Ω–∞–ª ${signal}, –∑—É–ø–∏–Ω—è—î–º–æ –±–æ—Ç–∞...`);
    
    try {
      this.bot.stop(signal);
      await this.databaseService.close();
      console.log('‚úÖ –ë–æ—Ç –∑—É–ø–∏–Ω–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ –±–æ—Ç–∞:', error);
    }
  }

  /**
   * –û—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
   */
  async getStats() {
    try {
      return await this.taskService.getTaskStatistics();
    } catch (error) {
      console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
      return [];
    }
  }
}

module.exports = SkillKlanBot;
