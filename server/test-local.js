#!/usr/bin/env node

// ะะพะบะฐะปัะฝะธะน ัะตัั ัะตัะฒะตัะฐ ะฑะตะท ะทะฐะฟััะบั ะฑะพัะฐ
require('dotenv').config({ path: './.env' });

const express = require('express');
const cors = require('cors');
const helmet = require('helmet');

console.log('๐งช ะะพะบะฐะปัะฝะธะน ัะตัั ัะตัะฒะตัะฐ...');

// ะกัะฒะพัััะผะพ Express ะดะพะดะฐัะพะบ
const app = express();
const PORT = process.env.PORT || 3001;

// Middleware
app.use(helmet());
app.use(cors());
app.use(express.json());
app.use(express.urlencoded({ extended: true }));

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// Test endpoints
app.get('/api/test', (req, res) => {
  res.json({ 
    message: 'ะขะตััะพะฒะธะน endpoint ะฟัะฐััั',
    timestamp: new Date().toISOString()
  });
});

// Database test endpoint
app.get('/api/db-test', async (req, res) => {
  try {
    const { DatabaseService } = require('./shared/database/DatabaseService');
    const db = new DatabaseService();
    
    // ะขะตััััะผะพ ะท'ัะดะฝะฐะฝะฝั
    await db.connect();
    console.log('โ ะ\'ัะดะฝะฐะฝะฝั ะท ะะ ััะฟััะฝะต');
    
    // ะขะตััััะผะพ ะทะฐะฟะธั
    const result = await db.query('SELECT NOW() as current_time');
    console.log('โ ะะฐะฟะธั ะดะพ ะะ ััะฟััะฝะธะน:', result.rows[0]);
    
    await db.disconnect();
    
    res.json({ 
      status: 'success',
      message: 'ะะฐะทะฐ ะดะฐะฝะธั ะฟัะฐััั',
      data: result.rows[0]
    });
  } catch (error) {
    console.error('โ ะะพะผะธะปะบะฐ ะะ:', error);
    res.status(500).json({ 
      status: 'error',
      message: 'ะะพะผะธะปะบะฐ ะฑะฐะทะธ ะดะฐะฝะธั',
      error: error.message
    });
  }
});

// Bot test endpoint (ะฑะตะท ะทะฐะฟััะบั ะฑะพัะฐ)
app.get('/api/bot-test', async (req, res) => {
  try {
    const { Telegraf } = require('telegraf');
    const bot = new Telegraf(process.env.TELEGRAM_BOT_TOKEN);
    
    // ะขะตััััะผะพ ัะพะบะตะฝ
    const me = await bot.telegram.getMe();
    console.log('โ ะะพั ัะพะบะตะฝ ะฒะฐะปัะดะฝะธะน:', me.first_name);
    
    res.json({ 
      status: 'success',
      message: 'ะะพั ัะพะบะตะฝ ะฒะฐะปัะดะฝะธะน',
      bot: {
        id: me.id,
        first_name: me.first_name,
        username: me.username
      }
    });
  } catch (error) {
    console.error('โ ะะพะผะธะปะบะฐ ะฑะพัะฐ:', error);
    res.status(500).json({ 
      status: 'error',
      message: 'ะะพะผะธะปะบะฐ ะฑะพัะฐ',
      error: error.message
    });
  }
});

// Webhook test endpoint
app.get('/api/webhook-test', (req, res) => {
  try {
    const webhookConfig = require('./config/webhook.config.js');
    
    res.json({ 
      status: 'success',
      message: 'Webhook ะบะพะฝััะณััะฐััั ะทะฐะฒะฐะฝัะฐะถะตะฝะฐ',
      config: {
        enabled: webhookConfig.enabled,
        hasUrl: !!webhookConfig.webhookUrl,
        url: webhookConfig.webhookUrl ? 'ะฒััะฐะฝะพะฒะปะตะฝะพ' : 'ะฝะต ะฒััะฐะฝะพะฒะปะตะฝะพ'
      }
    });
  } catch (error) {
    console.error('โ ะะพะผะธะปะบะฐ webhook:', error);
    res.status(500).json({ 
      status: 'error',
      message: 'ะะพะผะธะปะบะฐ webhook',
      error: error.message
    });
  }
});

// Error handling
app.use((err, req, res, next) => {
  console.error('โ ะะพะผะธะปะบะฐ ัะตัะฒะตัะฐ:', err);
  res.status(500).json({ 
    error: 'ะะฝัััััะฝั ะฟะพะผะธะปะบะฐ ัะตัะฒะตัะฐ',
    message: err.message
  });
});

// 404 handler
app.use((req, res) => {
  res.status(404).json({ 
    error: 'Endpoint ะฝะต ะทะฝะฐะนะดะตะฝะพ',
    path: req.path
  });
});

// ะะฐะฟััะบะฐัะผะพ ัะตัะฒะตั
app.listen(PORT, () => {
  console.log(`๐ ะะพะบะฐะปัะฝะธะน ัะตััะพะฒะธะน ัะตัะฒะตั ะทะฐะฟััะตะฝะพ ะฝะฐ ะฟะพััั ${PORT}`);
  console.log(`๐ Health check: http://localhost:${PORT}/api/health`);
  console.log(`๐งช ะขะตัั endpoints: http://localhost:${PORT}/api/test`);
  console.log(`๐๏ธ  ะะ ัะตัั: http://localhost:${PORT}/api/db-test`);
  console.log(`๐ค ะะพั ัะตัั: http://localhost:${PORT}/api/bot-test`);
  console.log(`๐ Webhook ัะตัั: http://localhost:${PORT}/api/webhook-test`);
  console.log('');
  console.log('โน๏ธ  ะะปั ะทัะฟะธะฝะบะธ ะฝะฐัะธัะฝััั Ctrl+C');
});

// Graceful shutdown
process.on('SIGINT', () => {
  console.log('\n๐ ะัะฟะธะฝััะผะพ ะปะพะบะฐะปัะฝะธะน ัะตััะพะฒะธะน ัะตัะฒะตั...');
  process.exit(0);
});

process.on('SIGTERM', () => {
  console.log('\n๐ ะัะฟะธะฝััะผะพ ะปะพะบะฐะปัะฝะธะน ัะตััะพะฒะธะน ัะตัะฒะตั...');
  process.exit(0);
});
