#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è Webhook Management API
 * –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node scripts/test-webhook-api.js
 */

const axios = require('axios');

const BASE_URL = 'http://localhost:3000/api/webhook';

// –ö–æ–ª—å–æ—Ä–∏ –¥–ª—è –∫–æ–Ω—Å–æ–ª—ñ
const colors = {
  reset: '\x1b[0m',
  bright: '\x1b[1m',
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  magenta: '\x1b[35m',
  cyan: '\x1b[36m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

async function testAPI() {
  log('\nüß™ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Webhook Management API', 'bright');
  log('=====================================', 'cyan');

  try {
    // 1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É
    log('\n1. –û—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ—á–∞—Ç–∫–æ–≤–æ–≥–æ —Å—Ç–∞—Ç—É—Å—É webhook...', 'blue');
    const statusResponse = await axios.get(`${BASE_URL}/status`);
    log('‚úÖ –°—Ç–∞—Ç—É—Å –æ—Ç—Ä–∏–º–∞–Ω–æ:', 'green');
    console.log(JSON.stringify(statusResponse.data, null, 2));

    // 2. –í–∏–º–∫–Ω–µ–Ω–Ω—è webhook
    log('\n2. –í–∏–º–∫–Ω–µ–Ω–Ω—è webhook...', 'blue');
    const disableResponse = await axios.post(`${BASE_URL}/toggle`, { enabled: false });
    log('‚úÖ Webhook –≤–∏–º–∫–Ω–µ–Ω–æ:', 'green');
    console.log(JSON.stringify(disableResponse.data, null, 2));

    // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ—Å–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è
    log('\n3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É –ø—ñ—Å–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è...', 'blue');
    const statusAfterDisable = await axios.get(`${BASE_URL}/status`);
    log('‚úÖ –°—Ç–∞—Ç—É—Å –ø—ñ—Å–ª—è –≤–∏–º–∫–Ω–µ–Ω–Ω—è:', 'green');
    console.log(JSON.stringify(statusAfterDisable.data, null, 2));

    // 4. –í–∏–º–∫–Ω–µ–Ω–Ω—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø—É –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
    log('\n4. –í–∏–º–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –ø–æ—á–∞—Ç–æ–∫ –≤–∑–∞—î–º–æ–¥—ñ—ó...', 'blue');
    const disableUserStarted = await axios.post(`${BASE_URL}/notification`, {
      type: 'userStarted',
      enabled: false
    });
    log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è userStarted –≤–∏–º–∫–Ω–µ–Ω–æ:', 'green');
    console.log(JSON.stringify(disableUserStarted.data, null, 2));

    // 5. –í–∏–º–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω
    log('\n5. –í–∏–º–∫–Ω–µ–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –ø—Ä–æ –¥–µ–¥–ª–∞–π–Ω...', 'blue');
    const disableDeadline = await axios.post(`${BASE_URL}/notification`, {
      type: 'deadlineWarning',
      enabled: false
    });
    log('‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è deadlineWarning –≤–∏–º–∫–Ω–µ–Ω–æ:', 'green');
    console.log(JSON.stringify(disableDeadline.data, null, 2));

    // 6. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó
    log('\n6. –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó webhook...', 'blue');
    const updateConfig = await axios.post(`${BASE_URL}/config`, {
      config: {
        enabled: true,
        notifications: {
          userStarted: false,
          userReady: true,
          contactProvided: true,
          taskSent: true,
          taskCompleted: true,
          deadlineWarning: false,
          deadlineToday: true
        },
        logging: {
          enabled: true,
          logLevel: 'debug'
        }
      }
    });
    log('‚úÖ –ö–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞:', 'green');
    console.log(JSON.stringify(updateConfig.data, null, 2));

    // 7. –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É
    log('\n7. –§—ñ–Ω–∞–ª—å–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å—É...', 'blue');
    const finalStatus = await axios.get(`${BASE_URL}/status`);
    log('‚úÖ –§—ñ–Ω–∞–ª—å–Ω–∏–π —Å—Ç–∞—Ç—É—Å:', 'green');
    console.log(JSON.stringify(finalStatus.data, null, 2));

    log('\nüéâ –í—Å—ñ —Ç–µ—Å—Ç–∏ –ø—Ä–æ–π—à–ª–∏ —É—Å–ø—ñ—à–Ω–æ!', 'green');

  } catch (error) {
    log('\n‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:', 'red');
    if (error.response) {
      log(`–°—Ç–∞—Ç—É—Å: ${error.response.status}`, 'red');
      log(`–î–∞–Ω—ñ: ${JSON.stringify(error.response.data, null, 2)}`, 'red');
    } else {
      log(`–ü–æ–º–∏–ª–∫–∞: ${error.message}`, 'red');
    }
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—ñ–≤
if (require.main === module) {
  testAPI();
}

module.exports = { testAPI };
